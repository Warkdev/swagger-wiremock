{
  "swagger": "2.0",
  "info": {
    "title": "AMPLIFY Transfer CFT API v1.4",
    "description": "New features in v1.4\n- Administration Commands\n- CFTIDF and CFTXLATE objects (Miscellaneous)\n- Login/Logout (Miscellaneous)\n- Bearer authentication ",
    "version": "1.4.0",
    "contact": {
      "email": "support@axway.com"
    },
    "license": {
      "name": "Copyright Axway 2019. All rights reserved."
    }
  },
  "schemes": [
    "https"
  ],
  "basePath": "/cft/api/v1",
  "tags": [
    {
      "name": "Transfers",
      "description": "Manage transfers."
    },
    {
      "name": "Logs",
      "description": "View the log."
    },
    {
      "name": "Commands",
      "description": "Administration Commands."
    },
    {
      "name": "Partners",
      "description": "Manage partner definitions."
    },
    {
      "name": "Flows",
      "description": "Manage flow-related definitions."
    },
    {
      "name": "General Parameters",
      "description": "Manage general settings."
    },
    {
      "name": "Access Management",
      "description": "Manage role and privilege definitions."
    },
    {
      "name": "Networks And Protocols",
      "description": "Manage network and protocol definitions."
    },
    {
      "name": "Miscellaneous",
      "description": "Other operations."
    }
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication."
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/about": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Get the version of Transfer CFT  (experimental).",
        "description": "Get the version of Transfer CFT",
        "responses": {
          "200": {
            "description": "Informations about Transfer CFT",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "the version of CFT"
                },
                "level": {
                  "type": "string",
                  "description": "the level of CFT, SP and patch"
                },
                "system": {
                  "type": "string",
                  "description": "System running CFT"
                },
                "server_time": {
                  "type": "string",
                  "description": "Local time on CFT server"
                },
                "server_utc": {
                  "type": "string",
                  "description": "UTC Timezone on CFT server"
                },
                "multinode_enabled": {
                  "type": "boolean",
                  "description": "CFT is in mutinode mode"
                },
                "cg_enabled": {
                  "type": "boolean",
                  "description": "CFT is controlled by CG"
                },
                "ui_readonly": {
                  "type": "boolean",
                  "description": "Indicate if CFT UI allow command others than view or CFT objects definitions."
                },
                "instance_id": {
                  "type": "string",
                  "description": "The instance ID of CFT"
                },
                "user_name": {
                  "type": "string",
                  "description": "Name of connected user"
                }
              },
              "example": {
                "version": 3.5,
                "level": "",
                "system": "unix",
                "server_time": "1526301034000",
                "server_utc": "2",
                "multinode_enabled": false,
                "cg_enabled": false,
                "ui_readonly": true,
                "instance_id": "workstationaddress",
                "user_name": "johndoe"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Retrieves a list of log messages",
        "description": "Retrieves a list of log messages",
        "parameters": [
          {
            "name": "Severity",
            "in": "query",
            "description": "Severity of the log to return",
            "required": false,
            "type": "string",
            "maxLength": 1,
            "enum": [
              "F",
              "E",
              "W",
              "I"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of lines to display",
            "required": false,
            "type": "string",
            "minimum": 0,
            "maximum": 10000
          },
          {
            "name": "datetimemin",
            "in": "query",
            "description": "Use to display logs that happened on or after this start date and time YYYY-MM-DDThh:mm:ssZ",
            "required": false,
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          {
            "name": "datetimemax",
            "in": "query",
            "description": "Use to display logs that happened on or before this end date and time YYYY-MM-DDThh:mm:ssZ",
            "required": false,
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          {
            "name": "pattern",
            "in": "query",
            "description": "Only displays the log lines that match this specific pattern ; enter any pattern with a maximum of 63 characters",
            "required": false,
            "type": "string",
            "maxLength": 63
          }
        ],
        "responses": {
          "200": {
            "description": "A list of log messages",
            "schema": {
              "type": "object",
              "properties": {
                "logs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "node": {
                        "type": "string",
                        "description": "the cft node"
                      },
                      "severity": {
                        "type": "string",
                        "description": "message severity"
                      },
                      "code": {
                        "type": "string",
                        "description": "message code"
                      },
                      "date": {
                        "type": "string",
                        "description": "message type"
                      },
                      "message": {
                        "type": "string",
                        "description": "the message"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Retrieves a list of transfers",
        "description": "<p>\n  Retrieves a list of transfers.\n  <br>\n  If no fields are given in the request, the default value for the field is still sent by the server.\n  <br>\n  numberOfSelectedRecords count specifies the number of transfers corresponding to the selection.\n  <br>\n  numberOfUsedRecords count specifies the number of transfers currently present in the catalog.\n  <br>\n  The model below represents the response when the default fields are selected. Any field which appears in the get/idtu response can be selected.\n</p>",
        "parameters": [
          {
            "name": "ida",
            "in": "query",
            "description": "Transfer-related identifier.",
            "required": false,
            "type": "string",
            "maxLength": 64
          },
          {
            "name": "idtu",
            "in": "query",
            "description": "Transfer ID.",
            "required": false,
            "type": "string",
            "pattern": "[A-Z][0-9]{7}",
            "minLength": 8,
            "maxLength": 8
          },
          {
            "name": "idt",
            "in": "query",
            "description": "Protocol transfer ID.",
            "required": false,
            "type": "string",
            "pattern": "[A-Z][0-9]{7}",
            "minLength": 8,
            "maxLength": 8
          },
          {
            "name": "nidt",
            "in": "query",
            "description": "Network protocol transfer ID.",
            "required": false,
            "type": "string",
            "pattern": "[A-Z][0-9]{7}",
            "minLength": 8,
            "maxLength": 8
          },
          {
            "name": "part",
            "in": "query",
            "description": "Partner associated with the transfer.",
            "required": false,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "phase",
            "in": "query",
            "description": "Transfer phase.",
            "required": false,
            "type": "string",
            "enum": [
              "A",
              "T",
              "Y",
              "Z",
              "X"
            ],
            "minLength": 1,
            "maxLength": 1
          },
          {
            "name": "phasestep",
            "in": "query",
            "description": "Transfer phasestep.",
            "required": false,
            "type": "string",
            "enum": [
              "D",
              "C",
              "E",
              "K",
              "H",
              "X"
            ],
            "minLength": 1,
            "maxLength": 1
          },
          {
            "name": "fields",
            "in": "query",
            "description": "List of fields to return.",
            "required": false,
            "type": "string",
            "default": "PART,DIRECT,TYPE,COMPATSTATE,ACK,STATE,PHASE,PHASESTEP,IDF,IDT,IDTU,PIDTU,NREC,FREC,MSG,DIAGI,DIAGP,REQUSER,REQGROUP,IDA",
            "maxLength": 256
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Catalog offset.",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transfers to return.",
            "required": false,
            "type": "integer",
            "default": 100
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers.",
            "schema": {
              "type": "object",
              "properties": {
                "transfers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferDetailsList"
                  }
                },
                "numberOfSelectedRecords": {
                  "type": "integer",
                  "description": "Number of selected catalog records."
                },
                "numberOfUsedRecords": {
                  "type": "integer",
                  "description": "Number of used records in the catalog file."
                },
                "numberOfRecords": {
                  "type": "integer",
                  "description": "Total number of records in the catalog file."
                },
                "offset": {
                  "type": "integer",
                  "description": "Catalog offset integer."
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Retrieves a given transfer",
        "description": "Retrieves a given transfer.",
        "responses": {
          "200": {
            "description": "Transfer details upon successful query.",
            "schema": {
              "$ref": "#/definitions/TransferDetails"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Transfers"
        ],
        "summary": "Deletes a given transfer",
        "description": "Deletes a given transfer.",
        "responses": {
          "200": {
            "description": "Successfully deleted the transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/halt": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Interrupts a given transfer",
        "description": "Interrupts a given transfer. The interrupted transfer is set to H phasestep.",
        "responses": {
          "200": {
            "description": "Transfer interrupted."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/keep": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Suspends a given transfer",
        "description": "Suspends a given transfer. The suspended transfer is set to K phasestep.",
        "responses": {
          "200": {
            "description": "Transfer suspended."
          },
          "202": {
            "description": "The command was accepted, but not executed"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/start": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Restarts a given transfer",
        "description": "Restarts a given transfer. Transfers in the H or K phasestep in the catalog change to the D phasestep after this command is executed.",
        "responses": {
          "200": {
            "description": "Transfer restarted."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/resume": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Resumes a given transfer",
        "description": "Resumes a given transfer. This command retrieves, in server mode, a blocked send request that has a hold phasestep, and has a diagnostic codes other than zero.",
        "responses": {
          "200": {
            "description": "Resumed transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/submit": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Submits a processing procedure for a given transfer",
        "description": "Submits a processing procedure for a given transfer. <br> You can start, or restart, this procedure when the file or message transfer is in the T phasestep. <br> This command has no effect on transfers belonging to a broadcasting list, even if these transfers are in the T phasestep. <br> Alternatively, it can be applied to a generic transfer, whose PART parameter equals the broadcasting list identifier, when it is in the T phasestep.",
        "responses": {
          "200": {
            "description": "Submitted procedure."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/ack": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Acknowledges a given transfer",
        "description": "Acknowledges a given transfer. This command initiates the sending of a positive acknowledgement to the remote partner. <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "idm",
            "in": "query",
            "description": "Message identifier.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "json",
            "in": "body",
            "description": "Transfer parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequestSendReplyBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Acknowledged the transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/nack": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Acknowledges negatively a given transfer",
        "description": "Negatively acknowledges a given transfer. This command initiates the sending of a negative acknowledgement to the remote partner. <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "idm",
            "in": "query",
            "description": "Message identifier.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "json",
            "in": "body",
            "description": "Transfer parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequestSendNackBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Completed negative acknowledgement."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/{idtu}/end": {
      "parameters": [
        {
          "$ref": "#/parameters/idtu"
        }
      ],
      "put": {
        "tags": [
          "Transfers"
        ],
        "summary": "Ends a given transfer",
        "description": "Ends a given transfer.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "Transfer parameters.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransferRequestEndBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ended transfer."
          },
          "202": {
            "description": "The command was accepted, but not executed."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/TransferNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/files/outgoings": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new send file transfer request",
        "description": "Creates a new send file transfer request <br> If the IDA is not given in the request, it is generated by the server and returned if the operation is successful (code 201) or accepted (code 202).",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "type": "integer",
            "minimum": -1,
            "maximum": 120
          },
          {
            "name": "json",
            "in": "body",
            "description": "Send transfer request parameters.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransferRequestSendFileBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Return transfer information.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "202": {
            "description": "Accepted, but processing not complete.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/files/incomings": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new receive file transfer request",
        "description": "Creates a new receive file transfer request. <br> If the IDA is not given in the request, it is generated by the server and returned if operation is successful (code 201) or accepted (code 202).",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "idf",
            "in": "query",
            "description": "Flow ID.",
            "required": false,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "type": "integer",
            "minimum": -1,
            "maximum": 120
          },
          {
            "name": "json",
            "in": "body",
            "description": "Receive transfer request parameters.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransferRequestReceiveFileBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer details.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "202": {
            "description": "Accepted, but processing not completed.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/transfers/messages": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Creates a new message transfer request",
        "description": "Creates a new message transfer request. <br> If the IDA is not given in the request, it is generated by the server and returned if operation is successful (code 201) or accepted (code 202). <br> You MUST provide the MSG field in the body.",
        "parameters": [
          {
            "name": "part",
            "in": "query",
            "description": "Partner.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "idm",
            "in": "query",
            "description": "Message ID.",
            "required": true,
            "type": "string",
            "maxLength": 32
          },
          {
            "name": "apitimeout",
            "in": "query",
            "description": "Command timeout.",
            "required": false,
            "type": "integer",
            "minimum": -1,
            "maximum": 120
          },
          {
            "name": "json",
            "in": "body",
            "description": "Message transfer request parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequestSendMessageBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer details.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "202": {
            "description": "Accepted, but processing not completed.",
            "schema": {
              "$ref": "#/definitions/TransferRequestResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves all Transfer CFT configuration objects.",
        "description": "Retrieves all Transfer CFT configuration objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of objects",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "discriminator": "type",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "$ref": "#/definitions/CftEnumObjectsType"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/CftObjectsAttributes"
                        }
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftuconf": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a list of cftuconf definitions.",
        "description": "Retrieves a list of cftuconf definitions.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Uconf definition ID.",
            "required": false,
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Filter according to the UCONF setting.",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "USER",
              "DEFAULT"
            ]
          },
          {
            "name": "content",
            "in": "query",
            "description": "Information details.",
            "required": false,
            "type": "string",
            "enum": [
              "BRIEF",
              "FULL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftuconf definitions.",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftuconfList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftuconf/{uconfid}": {
      "parameters": [
        {
          "name": "uconfid",
          "in": "path",
          "description": "Uconf definition ID.",
          "required": true,
          "type": "string",
          "minLength": 1,
          "maxLength": 512
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a given cftuconf definition.",
        "responses": {
          "200": {
            "description": "cftuconf details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftuconfGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Modify the cftuconf definition.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftuconf object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftuconf"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectUconfId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftuconfSet"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftuconf details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftuconfGet"
            }
          },
          "201": {
            "description": "cftuconf details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftuconfGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Reset to default a given cftuconf definition.",
        "description": "Deletes a given cftuconf object.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/state": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "CFT Instance Status",
        "description": "CFT Instance Status",
        "responses": {
          "200": {
            "$ref": "#/responses/CftCmdStateDetails"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "description": "Monitor Not Running."
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/start": {
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Start the monitor",
        "description": "Start The monitor.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/stop": {
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Stop the Monitor",
        "description": "Stop The monitor. Transfers in progress are stopped.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/restart": {
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Stop and Restart the Monitor",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "List the CFT nodes",
        "description": "List the CFT nodes",
        "responses": {
          "200": {
            "$ref": "#/responses/CftCmdNodesList"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "description": "Monitor Not Running."
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/disable": {
      "parameters": [
        {
          "$ref": "#/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Disable node (multinode instance only)",
        "description": "Disable node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/enable": {
      "parameters": [
        {
          "$ref": "#/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Enable node (multinode instance only)",
        "description": "Disable node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/start": {
      "parameters": [
        {
          "$ref": "#/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Start the Node (multinode instance only)",
        "description": "Start The Node.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/stop": {
      "parameters": [
        {
          "$ref": "#/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Stop the Node (multinode instance only)",
        "description": "Stop The Node. Transfers in progress are stopped.",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/nodes/{id}/restart": {
      "parameters": [
        {
          "$ref": "#/parameters/nodeid"
        }
      ],
      "put": {
        "tags": [
          "Commands"
        ],
        "summary": "Stop and Restart the Node (multinode instance only)",
        "responses": {
          "202": {
            "description": "Command in progress."
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/cft/hosts": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "List the Hostnodes",
        "description": "List the CFT nodes",
        "responses": {
          "200": {
            "$ref": "#/responses/CftCmdHostsList"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "description": "Monitor Not Running."
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Login",
        "description": "Login to the Monitor and receive an session token.\nThe session token replace the basic Authorization information when using a browser and/or the UI.\nIt cannot be used for an applicatin which must use an API token.",
        "responses": {
          "200": {
            "description": "Login Information.",
            "schema": {
              "$ref": "#/definitions/CftLoginDetails"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Logout.",
        "description": "Logout from monitor.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves the partner lists",
        "description": "<p>\nRetrieves a list of CFTPART objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftpart",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftpartList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new partner",
        "description": "Adds a new CFTPART object.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftpart object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftpart"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftpartAttributes"
                }
              },
              "example": {
                "id": "paris",
                "type": "cftpart",
                "attributes": {
                  "prot": "pesit",
                  "comment": "Definition sample",
                  "idf": "txt"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftpart details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftpartGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific partner definition",
        "description": "<p>\nRetrieves a specific CFTPART object.\n</p>",
        "responses": {
          "200": {
            "description": "cftpart details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftpartGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a partner definition.",
        "description": "Adds or modifies a partner definition.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftpart object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftpart"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftpartAttributes"
                }
              },
              "example": {
                "id": "paris",
                "type": "cftpart",
                "attributes": {
                  "prot": "pesit",
                  "comment": "Definition sample",
                  "idf": "txt"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftpart details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftpartGet"
            }
          },
          "201": {
            "description": "cftpart details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftpartGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes a partner definition",
        "description": "Deletes a CFTPART object.\nThis operation deletes all existing TCP definitions related to the partners to delete. ",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{partnerid}/tcp": {
      "parameters": [
        {
          "$ref": "#/parameters/partnerid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves all partner TCP definitions\"",
        "description": "Retrieves all CFTTCP objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectclass"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cfttcp",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttcpList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new TCP definition for a partner connection",
        "description": "Adds a new TCP definition for a partner connection",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cfttcp object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cfttcp"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftTcpClassId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCfttcpAttributes"
                }
              },
              "example": {
                "type": "cfttcp",
                "id": 1,
                "attributes": {
                  "cnxin": 2,
                  "cnxout": 2,
                  "comment": "Default destination for the Paris office",
                  "host": "paris.office"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cfttcp details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttcpGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpart/{partnerid}/tcp/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/partnerid"
        },
        {
          "$ref": "#/parameters/classid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific partner TCP definition",
        "description": "Retrieves a specific partner TCP definition",
        "responses": {
          "200": {
            "description": "cfttcp details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttcpGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a TCP definition for a partner connection",
        "description": "Adds or modifies a TCP definition for a partner connection",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cfttcp object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cfttcp"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftTcpClassId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCfttcpAttributes"
                }
              },
              "example": {
                "type": "cfttcp",
                "id": 1,
                "attributes": {
                  "cnxin": 2,
                  "cnxout": 2,
                  "comment": "Default destination for the Paris office",
                  "host": "paris.office"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cfttcp details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttcpGet"
            }
          },
          "201": {
            "description": "cfttcp details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttcpGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes a TCP definition associated with a partner",
        "description": "Deletes a TCP definition associated with a partner",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of send transfer models",
        "description": "Retrieves a list of CFTSEND object, where either impl=no (client or server mode) or impl=yes (server mode).",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "The send transfer model type (cftsendno and cftsendyes).",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "cftsendno",
                          "cftsendyes"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "attributes": {
                        "$ref": "#/definitions/CftObjectsCftsendAttributes"
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              },
              "example": {
                "links": {
                  "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend"
                },
                "data": [
                  {
                    "type": "cftsendno",
                    "id": "sendanddelete",
                    "attributes": {
                      "delete": "yes",
                      "comment": "Send the file and delete the catalog record after completion",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
                    }
                  },
                  {
                    "type": "cftsendyes",
                    "id": "make_available",
                    "attributes": {
                      "fcode": "BINARY",
                      "frecfm": "F",
                      "faction": "NONE",
                      "STATE": "DISP",
                      "comment": "Make a file available when using Transfer CFT in server mode",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of send transfer models",
        "description": "<p>\nRetrieves a list of CFTSEND objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsendno",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendListNo"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer model",
        "description": "Adds a new transfer model",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsendno object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsendno"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsendAttributes"
                }
              },
              "example": {
                "id": "sendanddelete",
                "type": "cftsendno",
                "attributes": {
                  "delete": "yes",
                  "comment": "Send the file and delete the catalog record after completion"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsendno details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetNo"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific send transfer model",
        "description": "<p>\n  Retrieves a specific CFTSEND object.\n</p>",
        "responses": {
          "200": {
            "description": "cftsendno details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetNo"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a transfer model",
        "description": "Adds or modifies a transfer model",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsendno object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsendno"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsendAttributes"
                }
              },
              "example": {
                "id": "sendanddelete",
                "type": "cftsendno",
                "attributes": {
                  "delete": "yes",
                  "comment": "Send the file and delete the catalog record after completion"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsendno details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetNo"
            }
          },
          "201": {
            "description": "cftsendno details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetNo"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a send transfer model",
        "description": "Deletes a send transfer model",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{idfsendid}/idf": {
      "parameters": [
        {
          "$ref": "#/parameters/idfsendid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfsend objects.",
        "description": "Retrieves a list of cftidfsend objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfsend",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfListSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Create a cftidfsend object.",
        "description": "Create a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition refrenced by <strong>idfrecvid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfsend",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftidfsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implno/{idfsendid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/idfsendid"
        },
        {
          "$ref": "#/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfsend object.",
        "description": "Retrieves a given cftidfsend object",
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modify or Create a cftidfsend object.",
        "description": "Modify a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition refrenced by <strong>idfsendid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfsend",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "201": {
            "description": "cftidfsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfsend object.",
        "description": "Deletes a given cftidfsend object.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of implicit send transfer models",
        "description": "<p>\nRetrieves a list of CFTSEND objects with impl=yes.\n<br>\nYou can use the implicit transfer mode to make a file whose content is frequently changing available to other applications.\nIn this case, the file is always available and applications can retrieve it as many time as necessary.\n</p>",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsendyes",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendListYes"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new send transfer model in server mode",
        "description": "Adds a new send transfer model in server mode",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsendyes object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsendyes"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsendAttributes"
                }
              },
              "example": {
                "id": "make_available",
                "type": "cftsendyes",
                "attributes": {
                  "fcode": "BINARY",
                  "frecfm": "F",
                  "faction": "NONE",
                  "STATE": "DISP",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsendyes details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetYes"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific send transfer model in server mode",
        "description": "<p>\nRetrieves a specific CFTSEND object (IMPL=YES).\n</p>",
        "responses": {
          "200": {
            "description": "cftsendyes details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetYes"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a send transfer model in server mode",
        "description": "Adds or modifies a send transfer model in server mode",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsendyes object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsendyes"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsendAttributes"
                }
              },
              "example": {
                "id": "make_available",
                "type": "cftsendyes",
                "attributes": {
                  "fcode": "BINARY",
                  "frecfm": "F",
                  "faction": "NONE",
                  "STATE": "DISP",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsendyes details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetYes"
            }
          },
          "201": {
            "description": "cftsendyes details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsendGetYes"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes an implicit send transfer model",
        "description": "Deletes an implicit send transfer model ",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{idfsendid}/idf": {
      "parameters": [
        {
          "$ref": "#/parameters/idfsendid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfsend objects.",
        "description": "Retrieves a list of cftidfsend objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfsend",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfListSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Create a cftidfsend object.",
        "description": "Create a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition refrenced by <strong>idfrecvid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfsend",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftidfsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftsend/implyes/{idfsendid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/idfsendid"
        },
        {
          "$ref": "#/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfsend object.",
        "description": "Retrieves a given cftidfsend object",
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modify or Create a cftidfsend object.",
        "description": "Modify a protocol alias for the destination when using the CFTSEND/IMPLNO or CFTSEND/IMPLYES definition refrenced by <strong>idfsendid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfsend",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftidfsend details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "201": {
            "description": "cftidfsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfsend object.",
        "description": "Deletes a given cftidfsend object.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the receive transfer model list",
        "description": "<p>\nRetrieves a list of CFTRECV objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftrecv",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftrecvList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new receive transfer model",
        "description": "Adds a new receive transfer model",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftrecvAttributes"
                }
              },
              "example": {
                "id": "make_available",
                "type": "cftrecv",
                "attributes": {
                  "frecfm": "F",
                  "comment": "Create a fixed-record-format file; padding occurs"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftrecvGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a specific receive transfer model",
        "description": "<p>\nRetrieves a specific CFTRECV object.\n</p>",
        "responses": {
          "200": {
            "description": "cftrecv details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftrecvGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a receive transfer model",
        "description": "Adds or modifies a receive transfer model",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftrecvAttributes"
                }
              },
              "example": {
                "id": "make_available",
                "type": "cftrecv",
                "attributes": {
                  "frecfm": "F",
                  "comment": "Create a fixed-record-format file; padding occurs"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftrecv details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftrecvGet"
            }
          },
          "201": {
            "description": "cftrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftrecvGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the receive transfer model",
        "description": "Deletes the receive transfer model",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{idfrecvid}/idf": {
      "parameters": [
        {
          "$ref": "#/parameters/idfrecvid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftidfrecv objects.",
        "description": "Retrieves a list of cftidfrecv objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftidfrecv",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfListRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Create a cftidfrecv object.",
        "description": "Create a protocol alias for the destination when using the CFTRECV definition refrenced by <strong>idfrecvid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfrecv",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftidfrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrecv/{idfrecvid}/idf/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/idfrecvid"
        },
        {
          "$ref": "#/parameters/idfpartid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftidfrecv object.",
        "description": "Retrieves a given cftidfrecv object",
        "responses": {
          "200": {
            "description": "cftidfrecv details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetRecv"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modify or Create a cftidfrecv object.",
        "description": "Modify a protocol alias for the destination when using the CFTRECV definition refrenced by <strong>idfrecvid</strong> \n<strong>id</strong> corresponds to \"Local identifier of the partner\" for which the IDF/NIDF correspondence is valid. Same value as the value of the ID parameter of CFTPART.\nAttribute <strong>nidf</strong> corresponds to \"File network identifier\", the value which is sent over the network\" ",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftidfrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftidfrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftidfAttributes"
                }
              },
              "example": {
                "type": "cftidfrecv",
                "id": "paris",
                "attributes": {
                  "nidf": "ALIAS_PARIS",
                  "comment": "When destination is PARIS overide the Identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftidfrecv details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetRecv"
            }
          },
          "201": {
            "description": "cftidfrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftidfGetRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftidfrecv object.",
        "description": "Deletes a given cftidfrecv object.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftdest": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves the broadcast lists",
        "description": "<p>\nRetrieves all broadcast list objects.\n</p>",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftdest",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftdestList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new broadcast list",
        "description": "Adds a new CFTDEST object.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftdest object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftdest"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftdestAttributes"
                }
              },
              "example": {
                "id": "city",
                "type": "cftdest",
                "attributes": {
                  "part": [
                    "PARIS",
                    "NEWYORK"
                  ],
                  "comment": "City definition sample"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftdest details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftdestGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftdest/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific broadcast list",
        "description": "<p>\nRetrieves a specific CFTDEST object.\n</p>",
        "responses": {
          "200": {
            "description": "cftdest details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftdestGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a broadcast list",
        "description": "Adds or modifies a broadcast list",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftdest object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftdest"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftdestAttributes"
                }
              },
              "example": {
                "id": "city",
                "type": "cftdest",
                "attributes": {
                  "part": [
                    "PARIS",
                    "NEWYORK"
                  ],
                  "comment": "City definition sample"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftdest details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftdestGet"
            }
          },
          "201": {
            "description": "cftdest details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftdestGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the broadcast lists",
        "description": "Deletes the broadcast lists",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftauth": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of authorized file identifiers",
        "description": "Retrieves a list of authorized file identifiers",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftauth",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftauthList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new list of authorized file identifiers",
        "description": "Adds a new list of authorized file identifiers",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftauth object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftauth"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftauthAttributes"
                }
              },
              "example": {
                "type": "cftauth",
                "id": "sndfactory",
                "attributes": {
                  "idf": [
                    "bin",
                    "txt"
                  ],
                  "comment": "List of send IDF defined for partner FACTORY"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftauth details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftauthGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftauth/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the list of authorized file identifiers",
        "description": "Retrieves the list of authorized file identifiers",
        "responses": {
          "200": {
            "description": "cftauth details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftauthGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a list of authorized file identifiers",
        "description": "Adds or modifies a list of authorized file identifiers",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftauth object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftauth"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftauthAttributes"
                }
              },
              "example": {
                "type": "cftauth",
                "id": "sndfactory",
                "attributes": {
                  "idf": [
                    "bin",
                    "txt"
                  ],
                  "comment": "List of send IDF defined for partner FACTORY"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftauth details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftauthGet"
            }
          },
          "201": {
            "description": "cftauth details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftauthGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a list of authorized file identifiers",
        "description": "Deletes a list of authorized file identifiers",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of transfer owner definitions",
        "description": "Retrieves a list of CFTAPPL objects, where direction can be BOTH, SEND, or RECV.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "The cftappl definition (cftapplboth, cftapplsend, and cftapplrecv).",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "cftapplboth",
                          "cftapplsend",
                          "cftapplrecv"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "attributes": {
                        "$ref": "#/definitions/CftObjectsCftapplAttributes"
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              },
              "example": {
                "links": {
                  "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl"
                },
                "data": [
                  {
                    "type": "cftapplsend",
                    "id": "factory",
                    "attributes": {
                      "userid": "ORDER",
                      "comment": "Owner set to send files to factories",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl/send/factory"
                    }
                  },
                  {
                    "type": "cftapplrecv",
                    "id": "factory",
                    "attributes": {
                      "userid": "RECEIPT",
                      "comment": "Owner set to received files from factories",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftappl/recv/factory"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/both": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set regardless of the direction",
        "description": "Retrieves the transfer owner definition set regardless of the direction",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplboth",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplListBoth"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition set regardless of the direction",
        "description": "Adds a new transfer owner definition set regardless of the direction",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplboth object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplboth"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplboth",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDER",
                  "comment": "Owner set to send/received files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftapplboth details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetBoth"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/both/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set regardless of the direction",
        "description": "Retrieves the transfer owner definition set regardless of the direction",
        "responses": {
          "200": {
            "description": "cftapplboth details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetBoth"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies the transfer owner definition set regardless of the direction",
        "description": "Adds or modifies the transfer owner definition set regardless of the direction",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplboth object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplboth"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplboth",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDER",
                  "comment": "Owner set to send/received files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftapplboth details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetBoth"
            }
          },
          "201": {
            "description": "cftapplboth details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetBoth"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the transfer owner definition set regardless of the direction",
        "description": "Deletes the transfer owner definition set regardless of the direction",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/send": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set - Send only",
        "description": "Retrieves the transfer owner definition set - Send only",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplsend",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplListSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition - Send only",
        "description": "Adds a new transfer owner definition - Send only",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplsend",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDERSEND",
                  "comment": "Owner set to send files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftapplsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/send/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the transfer owner definition set - Send only",
        "description": "Retrieves the transfer owner definition set - Send only",
        "responses": {
          "200": {
            "description": "cftapplsend details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetSend"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a transfer owner definition - Send only",
        "description": "Adds or modifies a transfer owner definition - Send only",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplsend object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplsend"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplsend",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDERSEND",
                  "comment": "Owner set to send files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftapplsend details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetSend"
            }
          },
          "201": {
            "description": "cftapplsend details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetSend"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes the transfer owner definition set - Send only",
        "description": "Deletes the transfer owner definition set - Send only",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/recv": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a transfer owner definition - Receive only",
        "description": "Retrieves a transfer owner definition - Receive only",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftapplrecv",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplListRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new transfer owner definition - Receive only",
        "description": "Adds a new transfer owner definition - Receive only",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplrecv",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDERRECV",
                  "comment": "Owner set to receive files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftapplrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftappl/recv/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a transfer owner definition - Receive only",
        "description": "Retrieves a transfer owner definition - Receive only",
        "responses": {
          "200": {
            "description": "cftapplrecv details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetRecv"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies the transfer owner definition - Receive only",
        "description": "Adds or modifies the transfer owner definition - Receive only",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftapplrecv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftapplrecv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftapplAttributes"
                }
              },
              "example": {
                "type": "cftapplrecv",
                "id": "purchase",
                "attributes": {
                  "userid": "ORDERRECV",
                  "comment": "Owner set to receive files related to purchase orders"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftapplrecv details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetRecv"
            }
          },
          "201": {
            "description": "cftapplrecv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftapplGetRecv"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a transfer owner definition - Receive only",
        "description": "Deletes a transfer owner definition - Receive only",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the scheduler definition list",
        "description": "Retrieves the scheduler definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcron",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcronList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new scheduler definition",
        "description": "Adds a new scheduler definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcron object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcron"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcronAttributes"
                }
              },
              "example": {
                "type": "cftcron",
                "id": "exec_every_5min",
                "attributes": {
                  "crontab": "CRONTAB1,",
                  "exec": "<CRONCMD>",
                  "time": "m=*/5",
                  "state": "noactive",
                  "comment": "Execution script <CRONCMD> every 5 minutes"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftcron details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcronGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcron/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a scheduler definition",
        "description": "Retrieves a scheduler definition",
        "responses": {
          "200": {
            "description": "cftcron details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcronGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies a scheduler definition",
        "description": "Adds or modifies a scheduler definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcron object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcron"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcronAttributes"
                }
              },
              "example": {
                "type": "cftcron",
                "id": "exec_every_5min",
                "attributes": {
                  "crontab": "CRONTAB1,",
                  "exec": "<CRONCMD>",
                  "time": "m=*/5",
                  "state": "noactive",
                  "comment": "Execution script <CRONCMD> every 5 minutes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftcron details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcronGet"
            }
          },
          "201": {
            "description": "cftcron details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcronGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a scheduler definition",
        "description": "Deletes a scheduler definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a list of cftfolder objects.",
        "description": "Retrieves a list of cftfolder objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftfolder",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftfolderList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Create a cftfolder object.",
        "description": "Create a cftfolder object.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftfolder object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftfolder"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftfolderAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftfolder details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftfolderGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftfolder/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves a given cftfolder object.",
        "description": "Retrieves a given cftfolder object",
        "responses": {
          "200": {
            "description": "cftfolder details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftfolderGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Modify or Create a cftfolder object.",
        "description": "Modify or Create a cftfolder object.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftfolder object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftfolder"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftfolderAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftfolder details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftfolderGet"
            }
          },
          "201": {
            "description": "cftfolder details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftfolderGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes a given cftfolder object.",
        "description": "Deletes a given cftfolder object.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrole": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves the role profile list",
        "description": "Retrieves the role profile list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftrole",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftroleList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds a new role",
        "description": "Adds a new role",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftrole object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftrole"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftroleAttributes"
                }
              },
              "example": {
                "id": "view_flow",
                "type": "cftrole",
                "attributes": {
                  "privs": [
                    "SERVICE:UI_CONNECT",
                    "CONFIGURATION:CFTSEND_VIEW",
                    "CONFIGURATION:CFTRECV_VIEW",
                    "CONFIGURATION:CFTDEST_VIEW"
                  ],
                  "comment": "Only allow access to flow in read mode"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftrole details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftroleGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftrole/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves a role",
        "description": "Retrieves a role",
        "responses": {
          "200": {
            "description": "cftrole details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftroleGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds or modifies a role",
        "description": "Adds or modifies a role",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftrole object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftrole"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftroleAttributes"
                }
              },
              "example": {
                "id": "view_flow",
                "type": "cftrole",
                "attributes": {
                  "privs": [
                    "SERVICE:UI_CONNECT",
                    "CONFIGURATION:CFTSEND_VIEW",
                    "CONFIGURATION:CFTRECV_VIEW",
                    "CONFIGURATION:CFTDEST_VIEW"
                  ],
                  "comment": "Only allow access to flow in read mode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftrole details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftroleGet"
            }
          },
          "201": {
            "description": "cftrole details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftroleGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Access Management"
        ],
        "summary": "Deletes a role profile",
        "description": "Deletes a role profile",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpriv": {
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves the privilege definition list",
        "description": "Retrieves the privilege definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftpriv",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprivList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds a new privilege definition",
        "description": "Adds a new privilege definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftpriv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftpriv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftprivAttributes"
                }
              },
              "example": {
                "id": "make_transfer",
                "type": "cftpriv",
                "attributes": {
                  "resource": "transfer",
                  "actions": [
                    "create",
                    "delete",
                    "view",
                    "edit",
                    "cancel",
                    "resume",
                    "pause",
                    "execute",
                    "submit",
                    "end"
                  ],
                  "comment": "Manages transfer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftpriv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprivGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftpriv/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieves a privilege definition",
        "description": "Retrieves a privilege definition",
        "responses": {
          "200": {
            "description": "cftpriv details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprivGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Access Management"
        ],
        "summary": "Adds or modifies a privilege definition",
        "description": "Adds or modifies a privilege definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftpriv object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftpriv"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftprivAttributes"
                }
              },
              "example": {
                "id": "make_transfer",
                "type": "cftpriv",
                "attributes": {
                  "resource": "transfer",
                  "actions": [
                    "create",
                    "delete",
                    "view",
                    "edit",
                    "cancel",
                    "resume",
                    "pause",
                    "execute",
                    "submit",
                    "end"
                  ],
                  "comment": "Manages transfer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftpriv details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprivGet"
            }
          },
          "201": {
            "description": "cftpriv details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprivGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Access Management"
        ],
        "summary": "Deletes a privilege definition",
        "description": "Deletes a privilege definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions (client or server)",
        "description": "Retrieves a list of CFTSSL objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSL definitions.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "discriminator": "type",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "cftsslclient",
                          "cftsslserver"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/CftObjectsAttributes"
                        }
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/client": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions for client connections",
        "description": "Retrieves a list of SSL definitions for client connections",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsslclient",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslListClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new client SSL definition",
        "description": "Adds a new client SSL definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsslclient object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsslclient"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsslAttributesClient"
                }
              },
              "example": {
                "type": "cftsslclient",
                "id": "SSL_DEFAULT",
                "attributes": {
                  "version": "TLSV1COMP",
                  "keyext": "NONE",
                  "ciphlist": [
                    49200,
                    49199
                  ],
                  "usercid": "localuser",
                  "rootcid": [
                    "localroot",
                    "remoteca"
                  ],
                  "verify": "REQUIRED",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsslclient details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/client/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific client SSL definition",
        "description": "Retrieves a specific client SSL definition",
        "responses": {
          "200": {
            "description": "cftsslclient details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetClient"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a client SSL definition",
        "description": "Adds or modifies a client SSL definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsslclient object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsslclient"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsslAttributesClient"
                }
              },
              "example": {
                "type": "cftsslclient",
                "id": "SSL_DEFAULT",
                "attributes": {
                  "version": "TLSV1COMP",
                  "keyext": "NONE",
                  "ciphlist": [
                    49200,
                    49199
                  ],
                  "usercid": "localuser",
                  "rootcid": [
                    "localroot",
                    "remoteca"
                  ],
                  "verify": "REQUIRED",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsslclient details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetClient"
            }
          },
          "201": {
            "description": "cftsslclient details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSL definition for client connections",
        "description": "Deletes the SSL definition for client connections",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/server": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSL definitions for server connections",
        "description": "Retrieves a list of SSL definitions for server connections",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsslserver",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslListServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new server SSL definition",
        "description": "Adds a new server SSL definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsslserver object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsslserver"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsslAttributesServer"
                }
              },
              "example": {
                "type": "cftsslserver",
                "id": "SSL_DEFAULT",
                "attributes": {
                  "version": "TLSV1COMP",
                  "keyext": "NONE",
                  "ciphlist": [
                    49200,
                    49199
                  ],
                  "usercid": "localuser",
                  "rootcid": [
                    "localroot",
                    "remoteca"
                  ],
                  "verify": "REQUIRED",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsslserver details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssl/server/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific server SSL definition",
        "description": "Retrieves a specific server SSL definition",
        "responses": {
          "200": {
            "description": "cftsslserver details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetServer"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a server SSL definition",
        "description": "Adds or modifies a server SSL definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsslserver object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsslserver"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsslAttributesServer"
                }
              },
              "example": {
                "type": "cftsslserver",
                "id": "SSL_DEFAULT",
                "attributes": {
                  "version": "TLSV1COMP",
                  "keyext": "NONE",
                  "ciphlist": [
                    49200,
                    49199
                  ],
                  "usercid": "localuser",
                  "rootcid": [
                    "localroot",
                    "remoteca"
                  ],
                  "verify": "REQUIRED",
                  "comment": "Make a file available when using Transfer CFT in server mode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsslserver details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetServer"
            }
          },
          "201": {
            "description": "cftsslserver details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsslGetServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSL definition for server connections",
        "description": "Deletes the SSL definition for server connections",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions (client or server)",
        "description": "Retrieves a list of CFTSSH objects.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of CFTSSH objects.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "discriminator": "type",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "cftsshclient",
                          "cftsshserver"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/CftObjectsAttributes"
                        }
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/client": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions for client connections",
        "description": "Retrieves a list of SSH definitions for client connections",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsshclient",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshListClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new client SSH definition",
        "description": "Adds a new client SSH definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsshclient object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsshclient"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsshAttributesClient"
                }
              },
              "example": {
                "type": "cftsshclient",
                "id": "SSH_DEFAULT",
                "attributes": {
                  "cliprivkey": "CliPrivKey",
                  "srvpubkey": "PubRSAKey",
                  "ciphlist": [
                    "AES256-CTR",
                    "AES192-CTR"
                  ],
                  "keyexchg": [
                    "CURVE25519-SHA256@LIBSSH.ORG",
                    "ECDH-SHA2-NISTP256"
                  ],
                  "hmac": [
                    "HMAC-SHA2-512",
                    "HMAC-SHA2-256"
                  ],
                  "comment": "Client using key authentication."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsshclient details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/client/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific client SSH definition",
        "description": "Retrieves a specific client SSH definition",
        "responses": {
          "200": {
            "description": "cftsshclient details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetClient"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a client SSH definition",
        "description": "Adds or modifies a client SSH definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsshclient object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsshclient"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsshAttributesClient"
                }
              },
              "example": {
                "type": "cftsshclient",
                "id": "SSH_DEFAULT",
                "attributes": {
                  "cliprivkey": "CliPrivKey",
                  "srvpubkey": "PubRSAKey",
                  "ciphlist": [
                    "AES256-CTR",
                    "AES192-CTR"
                  ],
                  "keyexchg": [
                    "CURVE25519-SHA256@LIBSSH.ORG",
                    "ECDH-SHA2-NISTP256"
                  ],
                  "hmac": [
                    "HMAC-SHA2-512",
                    "HMAC-SHA2-256"
                  ],
                  "comment": "Client using key authentication."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsshclient details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetClient"
            }
          },
          "201": {
            "description": "cftsshclient details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetClient"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes the SSH definition for client connections",
        "description": "Deletes the SSH definition for client connections",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/server": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a list of SSH definitions for server connections",
        "description": "Retrieves a list of SSH definitions for server connections",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftsshserver",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshListServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds a new server SSH definition",
        "description": "Adds a new server SSH definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsshserver object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsshserver"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsshAttributesServer"
                }
              },
              "example": {
                "type": "cftsshserver",
                "id": "SSH_DEFAULT",
                "attributes": {
                  "srvprivkey": "PrivRSAKey",
                  "clipubkey": "CliPubKey",
                  "ciphlist": [
                    "AES256-CTR",
                    "AES192-CTR"
                  ],
                  "keyexchg": [
                    "CURVE25519-SHA256@LIBSSH.ORG",
                    "ECDH-SHA2-NISTP256"
                  ],
                  "hmac": [
                    "HMAC-SHA2-512",
                    "HMAC-SHA2-256"
                  ],
                  "comment": "Server requires client key authentication"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftsshserver details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftssh/server/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Retrieves a specific server SSH definition",
        "description": "Retrieves a specific server SSH definition",
        "responses": {
          "200": {
            "description": "cftsshserver details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetServer"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Adds or modifies a server SSH definition",
        "description": "Adds or modifies a server SSH definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftsshserver object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftsshserver"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftsshAttributesServer"
                }
              },
              "example": {
                "type": "cftsshserver",
                "id": "SSH_DEFAULT",
                "attributes": {
                  "srvprivkey": "PrivRSAKey",
                  "clipubkey": "CliPubKey",
                  "ciphlist": [
                    "AES256-CTR",
                    "AES192-CTR"
                  ],
                  "keyexchg": [
                    "CURVE25519-SHA256@LIBSSH.ORG",
                    "ECDH-SHA2-NISTP256"
                  ],
                  "hmac": [
                    "HMAC-SHA2-512",
                    "HMAC-SHA2-256"
                  ],
                  "comment": "Server requires client key authentication"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftsshserver details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetServer"
            }
          },
          "201": {
            "description": "cftsshserver details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftsshGetServer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes SSH definitions for server connections",
        "description": "Deletes SSH definitions for server connections",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcat": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the catalog definition list",
        "description": "Retrieves the catalog definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcat",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcatList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new catalog definition",
        "description": "Adds a new catalog definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcat object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcat"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcatAttributes"
                }
              },
              "example": {
                "id": "cat2",
                "type": "cftcat",
                "attributes": {
                  "fname": "catalog_file",
                  "comment": "Transfer CFT catalog file"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftcat details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcatGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcat/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a catalog definition",
        "description": "Retrieves a catalog definition",
        "responses": {
          "200": {
            "description": "cftcat details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcatGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a catalog definition",
        "description": "Adds or modifies a catalog definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcat object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcat"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcatAttributes"
                }
              },
              "example": {
                "id": "cat2",
                "type": "cftcat",
                "attributes": {
                  "fname": "catalog_file",
                  "comment": "Transfer CFT catalog file"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftcat details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcatGet"
            }
          },
          "201": {
            "description": "cftcat details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcatGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a catalog definition",
        "description": "Deletes a catalog definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcom": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the communication media list",
        "description": "Retrieves the communication media list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftcom",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcomList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new communication media",
        "description": "Adds a new communication media",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcom object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcom"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcomAttributes"
                }
              },
              "example": {
                "type": "cftcom",
                "id": "comfile",
                "attributes": {
                  "type": "file",
                  "comment": "Sample definition for file communication media with a scan every 5 seconds",
                  "wscan": 5,
                  "name": "com_file_name"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftcom details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcomGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftcom/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a communication media definition",
        "description": "Retrieves a communication media definition",
        "responses": {
          "200": {
            "description": "cftcom details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcomGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a communication media",
        "description": "Adds or modifies a communication media",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftcom object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftcom"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftcomAttributes"
                }
              },
              "example": {
                "type": "cftcom",
                "id": "comfile",
                "attributes": {
                  "type": "file",
                  "comment": "Sample definition for file communication media with a scan every 5 seconds",
                  "wscan": 5,
                  "name": "com_file_name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftcom details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcomGet"
            }
          },
          "201": {
            "description": "cftcom details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftcomGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a communication media",
        "description": "Deletes a communication media",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftlog": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the log file definitions",
        "description": "Retrieves the log file definitions",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftlog",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftlogList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new log file definition",
        "description": "Adds a new log file definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftlog object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftlog"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftlogAttributes"
                }
              },
              "example": {
                "id": "log2",
                "type": "cftlog",
                "attributes": {
                  "afname": "alternate_file",
                  "fname": "log_file",
                  "exec": "Switch_log_procedure",
                  "format": "V24",
                  "comment": "Transfer CFT log file"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftlog details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftlogGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftlog/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a log file definition",
        "description": "Retrieves a log file definition",
        "responses": {
          "200": {
            "description": "cftlog details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftlogGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a log file definition",
        "description": "Adds or modifies a log file definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftlog object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftlog"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftlogAttributes"
                }
              },
              "example": {
                "id": "log2",
                "type": "cftlog",
                "attributes": {
                  "afname": "alternate_file",
                  "fname": "log_file",
                  "exec": "Switch_log_procedure",
                  "format": "V24",
                  "comment": "Transfer CFT log file"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftlog details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftlogGet"
            }
          },
          "201": {
            "description": "cftlog details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftlogGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a log file definition",
        "description": "Deletes a log file definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftnet": {
      "get": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Retrieves the network definition list",
        "description": "Retrieves the network definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftnet",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftnetList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Adds a new network definition",
        "description": "Adds a new network definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftnet object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftnet"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftnetAttributes"
                }
              },
              "example": {
                "type": "cftnet",
                "id": "basetcp",
                "attributes": {
                  "type": "TCP",
                  "comment": "Sample definition for the TCP network",
                  "host": "INADDR_ANY",
                  "maxcnx": 300,
                  "call": "INOUT",
                  "srcports": "5000-65535"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftnet details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftnetGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftnet/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Retrieves a network definition",
        "description": "Retrieves a network definition",
        "responses": {
          "200": {
            "description": "cftnet details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftnetGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Adds or modifies a network definition",
        "description": "Adds or modifies a network definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftnet object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftnet"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftnetAttributes"
                }
              },
              "example": {
                "type": "cftnet",
                "id": "basetcp",
                "attributes": {
                  "type": "TCP",
                  "comment": "Sample definition for the TCP network",
                  "host": "INADDR_ANY",
                  "maxcnx": 300,
                  "call": "INOUT",
                  "srcports": "5000-65535"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftnet details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftnetGet"
            }
          },
          "201": {
            "description": "cftnet details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftnetGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Deletes a network definition",
        "description": "Deletes a network definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftparm": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the Transfer CFT parameter settings list",
        "description": "Retrieves the Transfer CFT parameter settings list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftparm",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftparmList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a Transfer CFT parameter settings definition",
        "description": "Adds a Transfer CFT parameter settings definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftparm object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftparm"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftparmAttributes"
                }
              },
              "example": {
                "id": "idparm2",
                "type": "cftparm",
                "attributes": {
                  "cat": "CAT0",
                  "com": [
                    "COM0",
                    "COMS"
                  ],
                  "net": [
                    "NET0"
                  ],
                  "prot": [
                    "PESITANY"
                  ],
                  "log": "LOG0",
                  "part": "LOCAL",
                  "key": "cft.key",
                  "partfnam": "cftpart_file",
                  "pkifname": "pkifile_name",
                  "pkipassw": "pass",
                  "comment": "Transfer CFT central definition"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftparm details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftparmGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftparm/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves a Transfer CFT parameter settings definition",
        "description": "Retrieves a Transfer CFT parameter settings definition",
        "responses": {
          "200": {
            "description": "cftparm details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftparmGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies a Transfer CFT parameter settings definition",
        "description": "Adds or modifies a Transfer CFT parameter settings definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftparm object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftparm"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftparmAttributes"
                }
              },
              "example": {
                "id": "idparm2",
                "type": "cftparm",
                "attributes": {
                  "cat": "CAT0",
                  "com": [
                    "COM0",
                    "COMS"
                  ],
                  "net": [
                    "NET0"
                  ],
                  "prot": [
                    "PESITANY"
                  ],
                  "log": "LOG0",
                  "part": "LOCAL",
                  "key": "cft.key",
                  "partfnam": "cftpart_file",
                  "pkifname": "pkifile_name",
                  "pkipassw": "pass",
                  "comment": "Transfer CFT central definition"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftparm details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftparmGet"
            }
          },
          "201": {
            "description": "cftparm details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftparmGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes a Transfer CFT parameter settings definition",
        "description": "Deletes a Transfer CFT parameter settings definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftprot": {
      "get": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Retrieves the protocol definition list",
        "description": "Retrieves the protocol definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftprot",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprotList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Adds a new protocol definition",
        "description": "Adds a new protocol definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftprot object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftprot"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftprotAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftprot details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprotGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftprot/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Retrieves a protocol definition",
        "description": "Retrieves a protocol definition",
        "responses": {
          "200": {
            "description": "cftprot details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprotGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Adds or modifies a protocol definition",
        "description": "Adds or modifies a protocol definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftprot object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftprot"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftprotAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftprot details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprotGet"
            }
          },
          "201": {
            "description": "cftprot details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftprotGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Networks And Protocols"
        ],
        "summary": "Deletes a protocol definition",
        "description": "Deletes a protocol definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftaccnt": {
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves the accounting definition list",
        "description": "Retrieves the accounting definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftaccnt",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftaccntList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds a new accounting definition",
        "description": "Adds a new accounting definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftaccnt object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftaccnt"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftaccntAttributes"
                }
              },
              "example": {
                "type": "cftaccnt",
                "id": "fileaccounting",
                "attributes": {
                  "comment": "Sample definition file accounting",
                  "type": "FILE",
                  "fname": "accounting_file",
                  "afname": "alternate accounting_file",
                  "exec": "switch_procedure",
                  "maxrec": 5000,
                  "language": "C",
                  "format": "V24"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftaccnt details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftaccntGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftaccnt/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Retrieves an accounting definition",
        "description": "Retrieves an accounting definition",
        "responses": {
          "200": {
            "description": "cftaccnt details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftaccntGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Adds or modifies an accounting definition",
        "description": "Adds or modifies an accounting definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftaccnt object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftaccnt"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftaccntAttributes"
                }
              },
              "example": {
                "type": "cftaccnt",
                "id": "fileaccounting",
                "attributes": {
                  "comment": "Sample definition file accounting",
                  "type": "FILE",
                  "fname": "accounting_file",
                  "afname": "alternate accounting_file",
                  "exec": "switch_procedure",
                  "maxrec": 5000,
                  "language": "C",
                  "format": "V24"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftaccnt details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftaccntGet"
            }
          },
          "201": {
            "description": "cftaccnt details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftaccntGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "General Parameters"
        ],
        "summary": "Deletes an accounting definition",
        "description": "Deletes an accounting definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a list of translation tables",
        "description": "Retrieves a list of translation tables",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          },
          {
            "$ref": "#/parameters/SelectTypeXlate"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of translation tables.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "links": {
                  "$ref": "#/definitions/ObjectSelfLinks"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id",
                      "attributes"
                    ],
                    "properties": {
                      "type": {
                        "$ref": "#/definitions/CftEnumXlate"
                      },
                      "id": {
                        "type": "string"
                      },
                      "attributes": {
                        "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                      },
                      "links": {
                        "$ref": "#/definitions/ObjectSelfLinks"
                      }
                    }
                  }
                }
              },
              "example": {
                "links": {
                  "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate"
                },
                "data": [
                  {
                    "type": "cftxlatesendasciiebcdic",
                    "id": "sendtozos",
                    "attributes": {
                      "comment": "Convert From ASCII To EBCDIC",
                      "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate/send/ascii/ebcdic/sendtozos"
                    }
                  },
                  {
                    "type": "cftxlaterecvebcdicascii",
                    "id": "recvfromzos",
                    "attributes": {
                      "comment": "Convert From EBCDIC To ASCII",
                      "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff",
                      "origin": "DESIGNER"
                    },
                    "links": {
                      "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftxlate/recv/ebcdic/ascii/recvfromzos"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Create a cftxlate{direct}{fcode}{ncode} object",
        "description": "Create a cftxlate{direct}{fcode}{ncode} object",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlate object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "$ref": "#/definitions/CftEnumXlate"
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              },
              "example": {
                "id": "sendtozos",
                "type": "cftxlatesendasciiebcdic",
                "attributes": {
                  "comment": "Convert From ASCII To EBCDIC",
                  "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftxlate details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ascii/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendasciiascii object.",
        "description": "Retrieves a translation table (sending from ASCII to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlatesendasciiascii details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlatesendasciiascii object.",
        "description": "Adds or modifies a translation table (sending from ASCII to ASCII).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlatesendasciiascii object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlatesendasciiascii"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlatesendasciiascii details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlatesendasciiascii details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendasciiascii object.",
        "description": "Deletes a translation table (sending from ASCII to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ascii/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendasciiebcdic object.",
        "description": "Retrieves a translation table (sending from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlatesendasciiebcdic details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlatesendasciiebcdic object.",
        "description": "Adds or modifies a translation table (sending from ASCII to EBCDIC).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlatesendasciiebcdic object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlatesendasciiebcdic"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              },
              "example": {
                "type": "cftxlate",
                "id": "SAETEXT",
                "attributes": {
                  "comment": "Convert From ASCII To EBCDIC",
                  "table": "00010203372d2e2f1605250b0c0d0e0f101112133c3d322618193f271c1d1e1f405a7f7b5b6c507d4d5d5c4e6b604b61f0f1f2f3f4f5f6f7f8f97a5e4c7e6e6f7cc1c2c3c4c5c6c7c8c9d1d2d3d4d5d6d7d8d9e2e3e4e5e6e7e8e9ade0bd5f6d79818283848586878889919293949596979899a2a3a4a5a6a7a8a9c06ad0a10780dc08421504171a52530a57568d8e8f901b20cb2122db092324284a9c9d9e9fa0292a2b2c3031333435aa363839aeafb0b1b2fab4b5b6b7b8b9ba3a3b3ebebcab414344bf4546474849ca4fcccdcecf515455585906626364bbac6566dddedf67e16869707172737475eaebecedeeef767778148a8b8c9a9bb3dafbfcfdfeff"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlatesendasciiebcdic details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlatesendasciiebcdic details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendasciiebcdic object.",
        "description": "Deletes a translation table (sending from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ebcdic/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendebcdicebcdic object.",
        "description": "Retrieves a translation table (sending from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicebcdic details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlatesendebcdicebcdic object.",
        "description": "Adds or modifies a translation table (sending from EBCDIC to EBCDIC).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlatesendebcdicebcdic object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlatesendebcdicebcdic"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicebcdic details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlatesendebcdicebcdic details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendebcdicebcdic object.",
        "description": "Deletes a translation table (sending from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/send/ebcdic/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlatesendebcdicascii object.",
        "description": "Retrieves a translation table (sending from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicascii details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlatesendebcdicascii object.",
        "description": "Adds or modifies a translation table (sending from EBCDIC to ASCII).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlatesendebcdicascii object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlatesendebcdicascii"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlatesendebcdicascii details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlatesendebcdicascii details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlatesendebcdicascii object.",
        "description": "Deletes a translation table (sending from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ascii/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvasciiascii object.",
        "description": "Retrieves a translation table (receiving from ASCII to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiascii details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlaterecvasciiascii object.",
        "description": "Adds or modifies a translation table (receiving from ASCII to ASCII).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlaterecvasciiascii object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlaterecvasciiascii"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiascii details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlaterecvasciiascii details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvasciiascii object.",
        "description": "Deletes a translation table (receiving from ASCII to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ascii/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvasciiebcdic object.",
        "description": "Retrieves a translation table (receiving from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiebcdic details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlaterecvasciiebcdic object.",
        "description": "Adds or modifies a translation table (receiving from ASCII to EBCDIC).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlaterecvasciiebcdic object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlaterecvasciiebcdic"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlaterecvasciiebcdic details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlaterecvasciiebcdic details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvasciiebcdic object.",
        "description": "Deletes a translation table (receiving from ASCII to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ebcdic/ebcdic/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvebcdicebcdic object.",
        "description": "Retrieves a translation table (receiving from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicebcdic details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlaterecvebcdicebcdic object.",
        "description": "Adds or modifies a translation table (receiving from EBCDIC to EBCDIC).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlaterecvebcdicebcdic object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlaterecvebcdicebcdic"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicebcdic details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlaterecvebcdicebcdic details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvebcdicebcdic object.",
        "description": "Deletes a translation table (receiving from EBCDIC to EBCDIC).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftxlate/recv/ebcdic/ascii/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a given cftxlaterecvebcdicascii object.",
        "description": "Retrieves a translation table (receiving from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicascii details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Modify or Create a cftxlaterecvebcdicascii object.",
        "description": "Adds or modifies a translation table (receiving from EBCDIC to ASCII).",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftxlaterecvebcdicascii object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftxlaterecvebcdicascii"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftxlateAttributes"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftxlaterecvebcdicascii details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "201": {
            "description": "cftxlaterecvebcdicascii details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftxlateGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes a given cftxlaterecvebcdicascii object.",
        "description": "Deletes a translation table (receiving from EBCDIC to ASCII).",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cfttoken": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves a list of tokens.",
        "description": "Retrieves a list of tokens.",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cfttoken",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttokenList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Create a new token associated with a user.",
        "description": "Create a new token associated with a user.\nOnly <strong>two</strong> tokens can be defined for each user.\nThe token is associated with the user who is executing the request. You cannot perform this operation on behalf of another user.",
        "responses": {
          "201": {
            "description": "cfttoken details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttokenGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cfttoken/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Retrieves the token associated with a user.",
        "description": "Retrieves the token associated with a user.\nThe tokens value are show encrypted, except when the ID corespond to the logged user.",
        "responses": {
          "200": {
            "description": "cfttoken details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttokenGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Revoke a token.",
        "description": "Modify the list of tokens. The tokens not listed are revoked.\nTo revoke all tokens, execute the DELETE operation.",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cfttoken object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cfttoken"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCfttokenAttributes"
                }
              },
              "example": {
                "type": "cfttoken",
                "id": "USER1",
                "attributes": {
                  "value": [
                    "aa.BB.CC"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cfttoken details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttokenGet"
            }
          },
          "201": {
            "description": "cfttoken details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCfttokenGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Deletes the tokens associated with a user.",
        "description": "Deletes the tokens associated with a user.",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftexit": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves the exit definition list",
        "description": "Retrieves the exit definition list",
        "parameters": [
          {
            "$ref": "#/parameters/selectid"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cftexit",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftexitList"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "post": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds a new exit definition",
        "description": "Adds a new exit definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftexit object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftexit"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftexitAttributes"
                }
              },
              "example": {
                "type": "cftexit",
                "id": "cftexitf",
                "attributes": {
                  "type": "FILE",
                  "language": "C",
                  "prog": "CFTEXITF",
                  "format": "V24",
                  "comment": "File Exit definition"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "cftexit details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftexitGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    },
    "/objects/cftexit/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/objectid"
        }
      ],
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Retrieves an exit definition",
        "description": "Retrieves an exit definition",
        "responses": {
          "200": {
            "description": "cftexit details upon successful query",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftexitGet"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows"
        ],
        "summary": "Adds or modifies an exit definition",
        "description": "Adds or modifies an exit definition",
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "cftexit object parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "cftexit"
                  ]
                },
                "id": {
                  "$ref": "#/definitions/CftObjectId"
                },
                "attributes": {
                  "$ref": "#/definitions/CftObjectsCftexitAttributes"
                }
              },
              "example": {
                "type": "cftexit",
                "id": "cftexitf",
                "attributes": {
                  "type": "FILE",
                  "language": "C",
                  "prog": "CFTEXITF",
                  "format": "V24",
                  "comment": "File Exit definition"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cftexit details upon successful modification",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftexitGet"
            }
          },
          "201": {
            "description": "cftexit details upon successful creation",
            "schema": {
              "$ref": "#/definitions/CftObjectsCftexitGet"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows"
        ],
        "summary": "Deletes an exit definition",
        "description": "Deletes an exit definition",
        "responses": {
          "200": {
            "$ref": "#/responses/ObjectDeleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/ObjectNotFound"
          },
          "default": {
            "$ref": "#/responses/OtherError"
          }
        }
      }
    }
  },
  "definitions": {
    "TransferRequestResult": {
      "type": "object",
      "properties": {
        "partner": {
          "type": "string",
          "description": "Remote partner."
        },
        "idf": {
          "type": "string",
          "description": "Flow ID."
        },
        "idtu": {
          "type": "string",
          "description": "Transfer ID."
        },
        "idt": {
          "type": "string",
          "description": "Protocol transfer ID."
        },
        "state": {
          "type": "string",
          "description": "Transfer state."
        },
        "phase": {
          "type": "string",
          "description": "Transfer phase."
        },
        "phasestep": {
          "type": "string",
          "description": "Transfer phasestep."
        },
        "ida": {
          "type": "string",
          "description": "Transfer-related identifier."
        },
        "diagi": {
          "type": "string",
          "description": "Diagnostic identifier relative to the transfer."
        },
        "diagp": {
          "type": "string",
          "description": "Diagnostic identifier relative to the transfer."
        },
        "links": {
          "type": "object",
          "properties": {
            "rel": {
              "type": "string",
              "description": "Relation between the link and the object. Usually equal to self."
            },
            "href": {
              "type": "string",
              "description": "Link to get created-object details."
            }
          }
        }
      }
    },
    "TransferDetailsList": {
      "type": "object",
      "properties": {
        "partner": {
          "type": "string",
          "description": "Remote partner."
        },
        "direct": {
          "type": "string",
          "description": "Transfer direction (send or recv)."
        },
        "type": {
          "type": "string",
          "description": "Either a file or message."
        },
        "compatstate": {
          "type": "string",
          "description": "Transfer state."
        },
        "ack": {
          "type": "string",
          "description": "Acknowledgement."
        },
        "state": {
          "type": "string",
          "description": "Transfer state."
        },
        "phase": {
          "type": "string",
          "description": "Transfer phase."
        },
        "phasestep": {
          "type": "string",
          "description": "Transfer phasestep."
        },
        "idf": {
          "type": "string",
          "description": "Flow ID."
        },
        "idt": {
          "type": "string",
          "description": "Protocol transfer ID."
        },
        "idtu": {
          "type": "string",
          "description": "Transfer ID."
        },
        "pidtu": {
          "type": "string",
          "description": "Parent transfer ID."
        },
        "nrec": {
          "type": "string",
          "description": "Number of records transmitted."
        },
        "frec": {
          "type": "string",
          "description": "Number of file records."
        },
        "msg": {
          "type": "string",
          "description": "Message."
        },
        "diagi": {
          "type": "string",
          "description": "Diagnostic code."
        },
        "diagp": {
          "type": "string",
          "description": "Additional diagnostics."
        },
        "requser": {
          "type": "string",
          "description": "Requesting user."
        },
        "reqgroup": {
          "type": "string",
          "description": "Requesting user group."
        },
        "ida": {
          "type": "string",
          "description": "Identifier related to the transfer."
        }
      }
    },
    "numberSelectedRecords": {
      "type": "integer",
      "description": "Number of selected object records."
    },
    "numberRecords": {
      "type": "integer",
      "description": "Number of records of the object type in the parameter file."
    },
    "offsetRecords": {
      "type": "integer",
      "description": "Record offset."
    },
    "Error": {
      "type": "object",
      "example": {
        "code": 99,
        "message": "Additional error details."
      },
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "TransferDetails": {
      "type": "object",
      "properties": {
        "ack": {
          "type": "string"
        },
        "ackexec": {
          "type": "string"
        },
        "ackmindate": {
          "type": "string"
        },
        "ackmintime": {
          "type": "string"
        },
        "ackstate": {
          "type": "string"
        },
        "acktimeout": {
          "type": "string"
        },
        "appstate": {
          "type": "string"
        },
        "blknum": {
          "type": "string"
        },
        "cftv": {
          "type": "string"
        },
        "chkw": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "commut": {
          "type": "string"
        },
        "commutrva": {
          "type": "string"
        },
        "compatstate": {
          "type": "string"
        },
        "comprate": {
          "type": "string"
        },
        "cos": {
          "type": "string"
        },
        "counterr": {
          "type": "string"
        },
        "cycdate": {
          "type": "string"
        },
        "cycle": {
          "type": "string"
        },
        "cyctime": {
          "type": "string"
        },
        "dateb": {
          "type": "string"
        },
        "dated": {
          "type": "string"
        },
        "datee": {
          "type": "string"
        },
        "datek": {
          "type": "string"
        },
        "delete": {
          "type": "string"
        },
        "dest": {
          "type": "string"
        },
        "destexec": {
          "type": "string"
        },
        "destexeca": {
          "type": "string"
        },
        "destexecpre": {
          "type": "string"
        },
        "diagc": {
          "type": "string"
        },
        "diagi": {
          "type": "string"
        },
        "diagp": {
          "type": "string"
        },
        "diftyp": {
          "type": "string"
        },
        "direct": {
          "type": "string"
        },
        "dirnb": {
          "type": "string"
        },
        "duplicate": {
          "type": "string"
        },
        "ecar": {
          "type": "string"
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "execinfo": {
          "type": "string"
        },
        "execrall": {
          "type": "string"
        },
        "execsub": {
          "type": "string"
        },
        "execsuba": {
          "type": "string"
        },
        "execsubpre": {
          "type": "string"
        },
        "facc": {
          "type": "string"
        },
        "faction": {
          "type": "string"
        },
        "fblksize": {
          "type": "string"
        },
        "fcar": {
          "type": "string"
        },
        "fcharset": {
          "type": "string"
        },
        "fcode": {
          "type": "string"
        },
        "fcomp": {
          "type": "string"
        },
        "fdate": {
          "type": "string"
        },
        "fdb": {
          "type": "string"
        },
        "fdbcomp": {
          "type": "string"
        },
        "fdelete": {
          "type": "string"
        },
        "fdisp": {
          "type": "string"
        },
        "filenotfound": {
          "type": "string"
        },
        "files": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "filtertype": {
          "type": "string"
        },
        "filtyp": {
          "type": "string"
        },
        "fkeypos": {
          "type": "string"
        },
        "fkeysize": {
          "type": "string"
        },
        "flowname": {
          "type": "string"
        },
        "flrecl": {
          "type": "string"
        },
        "fname": {
          "type": "string"
        },
        "fnum": {
          "type": "string"
        },
        "forg": {
          "type": "string"
        },
        "fpad": {
          "type": "string"
        },
        "fpath": {
          "type": "string"
        },
        "frec": {
          "type": "string"
        },
        "frecfm": {
          "type": "string"
        },
        "frecfmx": {
          "type": "string"
        },
        "froot": {
          "type": "string"
        },
        "fspace": {
          "type": "string"
        },
        "fspaces": {
          "type": "string"
        },
        "fstate": {
          "type": "string"
        },
        "fsuf": {
          "type": "string"
        },
        "fsyst": {
          "type": "string"
        },
        "ftime": {
          "type": "string"
        },
        "ftname": {
          "type": "string"
        },
        "ftype": {
          "type": "string"
        },
        "funit": {
          "type": "string"
        },
        "fver": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "groupid": {
          "type": "string"
        },
        "ida": {
          "type": "string"
        },
        "idappl": {
          "type": "string"
        },
        "idexit": {
          "type": "string"
        },
        "idexita": {
          "type": "string"
        },
        "idexite": {
          "type": "string"
        },
        "idexiteot": {
          "type": "string"
        },
        "idf": {
          "type": "string"
        },
        "idt": {
          "type": "string"
        },
        "idtu": {
          "type": "string"
        },
        "ipart": {
          "type": "string"
        },
        "iselect": {
          "type": "string"
        },
        "isrelay": {
          "type": "string"
        },
        "jobname": {
          "type": "string"
        },
        "lnum": {
          "type": "string"
        },
        "lpath": {
          "type": "string"
        },
        "lpath_r": {
          "type": "string"
        },
        "lracine": {
          "type": "string"
        },
        "lracine_r": {
          "type": "string"
        },
        "lsuffix": {
          "type": "string"
        },
        "lsuffix_r": {
          "type": "string"
        },
        "lunit": {
          "type": "string"
        },
        "lunit_r": {
          "type": "string"
        },
        "lunitc": {
          "type": "string"
        },
        "lunitc_r": {
          "type": "string"
        },
        "maction": {
          "type": "string"
        },
        "maxdate": {
          "type": "string"
        },
        "maxduration": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "mkdir": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "n_ackprocess": {
          "type": "string"
        },
        "n_ackprocess_err": {
          "type": "string"
        },
        "n_ackprot_pending": {
          "type": "string"
        },
        "n_nackprot_recv": {
          "type": "string"
        },
        "n_postprocess": {
          "type": "string"
        },
        "n_postprocess_err": {
          "type": "string"
        },
        "n_preprocess": {
          "type": "string"
        },
        "n_preprocess_err": {
          "type": "string"
        },
        "nblksize": {
          "type": "string"
        },
        "ncar": {
          "type": "string"
        },
        "ncharset": {
          "type": "string"
        },
        "nchkpt": {
          "type": "string"
        },
        "ncode": {
          "type": "string"
        },
        "ncomp": {
          "type": "string"
        },
        "ndays": {
          "type": "string"
        },
        "ndest": {
          "type": "string"
        },
        "netband": {
          "type": "string"
        },
        "nettyp": {
          "type": "string"
        },
        "nextdate": {
          "type": "string"
        },
        "nexttime": {
          "type": "string"
        },
        "nfname": {
          "type": "string"
        },
        "nfver": {
          "type": "string"
        },
        "nidf": {
          "type": "string"
        },
        "nidt": {
          "type": "string"
        },
        "nkeypos": {
          "type": "string"
        },
        "nkeysize": {
          "type": "string"
        },
        "nlrecl": {
          "type": "string"
        },
        "nodeid": {
          "type": "string"
        },
        "norg": {
          "type": "string"
        },
        "norig": {
          "type": "string"
        },
        "notify": {
          "type": "string"
        },
        "npad": {
          "type": "string"
        },
        "npart": {
          "type": "string"
        },
        "nrec": {
          "type": "string"
        },
        "nrecfm": {
          "type": "string"
        },
        "nrecfmx": {
          "type": "string"
        },
        "nrpart": {
          "type": "string"
        },
        "nrst": {
          "type": "string"
        },
        "nspace": {
          "type": "string"
        },
        "nspart": {
          "type": "string"
        },
        "nsyst": {
          "type": "string"
        },
        "ntf": {
          "type": "string"
        },
        "ntype": {
          "type": "string"
        },
        "opath": {
          "type": "string"
        },
        "opath_r": {
          "type": "string"
        },
        "opermsg": {
          "type": "string"
        },
        "oracine": {
          "type": "string"
        },
        "oracine_r": {
          "type": "string"
        },
        "origin": {
          "type": "string"
        },
        "osuffix": {
          "type": "string"
        },
        "osuffix_r": {
          "type": "string"
        },
        "ounit": {
          "type": "string"
        },
        "ounit_r": {
          "type": "string"
        },
        "ounitc": {
          "type": "string"
        },
        "ounitc_r": {
          "type": "string"
        },
        "pacing": {
          "type": "string"
        },
        "parm": {
          "type": "string"
        },
        "part": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "phasestep": {
          "type": "string"
        },
        "pidtu": {
          "type": "string"
        },
        "postmindate": {
          "type": "string"
        },
        "postmintime": {
          "type": "string"
        },
        "poststate": {
          "type": "string"
        },
        "posttimeout": {
          "type": "string"
        },
        "preexec": {
          "type": "string"
        },
        "premindate": {
          "type": "string"
        },
        "premintime": {
          "type": "string"
        },
        "prestate": {
          "type": "string"
        },
        "pretimeout": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "progress": {
          "type": "string"
        },
        "proprf": {
          "type": "string"
        },
        "protnum": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "protphase": {
          "type": "string"
        },
        "prottype": {
          "type": "string"
        },
        "prover": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "recoverystate": {
          "type": "string"
        },
        "relance": {
          "type": "string"
        },
        "reqgroup": {
          "type": "string"
        },
        "requser": {
          "type": "string"
        },
        "resync": {
          "type": "string"
        },
        "retry": {
          "type": "string"
        },
        "retryc": {
          "type": "string"
        },
        "retrym": {
          "type": "string"
        },
        "retryn": {
          "type": "string"
        },
        "retryp": {
          "type": "string"
        },
        "retryw": {
          "type": "string"
        },
        "ridtu": {
          "type": "string"
        },
        "rkerror": {
          "type": "string"
        },
        "rmsg": {
          "type": "string"
        },
        "rpart": {
          "type": "string"
        },
        "rpasswd": {
          "type": "string"
        },
        "rrename_count": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "savstate": {
          "type": "string"
        },
        "savtypf": {
          "type": "string"
        },
        "selfname": {
          "type": "string"
        },
        "sentinel": {
          "type": "string"
        },
        "serial": {
          "type": "string"
        },
        "sfname": {
          "type": "string"
        },
        "sigfname": {
          "type": "string"
        },
        "sminfnm": {
          "type": "string"
        },
        "sminusr": {
          "type": "string"
        },
        "sourceappl": {
          "type": "string"
        },
        "spart": {
          "type": "string"
        },
        "spasswd": {
          "type": "string"
        },
        "ssl": {
          "type": "string"
        },
        "sslauth": {
          "type": "string"
        },
        "sslciph": {
          "type": "string"
        },
        "sslfnam": {
          "type": "string"
        },
        "sslmode": {
          "type": "string"
        },
        "sslparm": {
          "type": "string"
        },
        "sslprof": {
          "type": "string"
        },
        "sslrmca": {
          "type": "string"
        },
        "sslrmus": {
          "type": "string"
        },
        "ssluser": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "statimpl": {
          "type": "string"
        },
        "storageaccount": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "targetappl": {
          "type": "string"
        },
        "tcycle": {
          "type": "string"
        },
        "timeb": {
          "type": "string"
        },
        "timed": {
          "type": "string"
        },
        "timee": {
          "type": "string"
        },
        "timek": {
          "type": "string"
        },
        "times": {
          "type": "string"
        },
        "timmaxc": {
          "type": "string"
        },
        "timmc": {
          "type": "string"
        },
        "trkr": {
          "type": "string"
        },
        "typcommut": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "typef": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "workingdir": {
          "type": "string"
        },
        "wphases": {
          "type": "string"
        },
        "wphasesteps": {
          "type": "string"
        },
        "wstates": {
          "type": "string"
        },
        "wtimeout": {
          "type": "string"
        },
        "xlate": {
          "type": "string"
        }
      }
    },
    "TransferRequestReceiveFileBody": {
      "type": "object",
      "example": {
        "fname": "file to be received",
        "parm": "additional information about the transfer"
      },
      "properties": {
        "ida": {
          "type": "string"
        },
        "fname": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "wfname": {
          "type": "string"
        },
        "wstates": {
          "type": "string"
        },
        "wphases": {
          "type": "string"
        },
        "wphasesteps": {
          "type": "string"
        },
        "wtimeout": {
          "type": "integer"
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "locmbx": {
          "type": "string"
        },
        "sync": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "todate": {
          "type": "string"
        },
        "totime": {
          "type": "string"
        },
        "cycdate": {
          "type": "string"
        },
        "cyctime": {
          "type": "string"
        },
        "maxdate": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "maxduration": {
          "type": "string"
        },
        "ackmindate": {
          "type": "string"
        },
        "ackmintime": {
          "type": "string"
        },
        "postmindate": {
          "type": "string"
        },
        "postmintime": {
          "type": "string"
        },
        "ackexEC": {
          "type": "string"
        },
        "ackstate": {
          "type": "string",
          "enum": [
            "REQUIRE",
            "IGNORE"
          ]
        },
        "acktimeout": {
          "type": "string"
        },
        "appcycid": {
          "type": "string"
        },
        "appobjid": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "cos": {
          "type": "string"
        },
        "dirnb": {
          "type": "string"
        },
        "daction": {
          "type": "string",
          "enum": [
            "ERROR",
            "RESUME"
          ]
        },
        "execrall": {
          "type": "string",
          "enum": [
            "ALL",
            "PARENT",
            "CHILDREN"
          ]
        },
        "exit": {
          "type": "string"
        },
        "facc": {
          "type": "string"
        },
        "faction": {
          "type": "string",
          "enum": [
            "ERASE",
            "DELETE",
            "VERIFY",
            "CONCAT",
            "RENAME"
          ]
        },
        "fblksize": {
          "type": "string"
        },
        "fcharset": {
          "type": "string"
        },
        "fcode": {
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY"
          ]
        },
        "fcomp": {
          "type": "string"
        },
        "fdb": {
          "type": "string"
        },
        "fdisp": {
          "type": "string",
          "enum": [
            "OLD",
            "NEW",
            "BOTH"
          ]
        },
        "file": {
          "type": "string",
          "enum": [
            "FIRST",
            "ALL"
          ]
        },
        "fkeylen": {
          "type": "string"
        },
        "fkeypos": {
          "type": "string"
        },
        "flrecl": {
          "type": "string"
        },
        "forg": {
          "type": "string",
          "enum": [
            "SEQ",
            "INDEXED",
            "IND",
            "DIRECT",
            "DIR",
            "PART",
            "PAR"
          ]
        },
        "fpad": {
          "type": "string"
        },
        "frecfm": {
          "type": "string",
          "enum": [
            "F",
            "U",
            "V"
          ]
        },
        "fspace": {
          "type": "string"
        },
        "ftype": {
          "type": "string",
          "enum": [
            "B",
            "V",
            "T",
            "O",
            "X",
            "J"
          ]
        },
        "maction": {
          "type": "string",
          "enum": [
            "REPLACE"
          ]
        },
        "ncharset": {
          "type": "string"
        },
        "ncomp": {
          "type": "string"
        },
        "netband": {
          "type": "string"
        },
        "nfver": {
          "type": "integer"
        },
        "notify": {
          "type": "string"
        },
        "poststate": {
          "type": "string",
          "enum": [
            "DISP"
          ]
        },
        "posttimeout": {
          "type": "string"
        },
        "pri": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "rpasswd": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "serial": {
          "type": "string",
          "enum": [
            "Y",
            "X"
          ]
        },
        "spasswd": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "trk": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO"
          ]
        },
        "xlate": {
          "type": "string"
        },
        "filenotfound": {
          "type": "string",
          "enum": [
            "ABORT",
            "IGNORE"
          ]
        },
        "cycle": {
          "type": "integer"
        },
        "fdate": {
          "type": "integer"
        },
        "ftime": {
          "type": "integer"
        },
        "nidf": {
          "type": "string"
        },
        "nfname": {
          "type": "string"
        },
        "parm": {
          "type": "string"
        },
        "prot": {
          "type": "string"
        },
        "tcycle": {
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "typ": {
          "type": "integer"
        }
      }
    },
    "TransferRequestSendFileBody": {
      "type": "object",
      "example": {
        "fname": "file to be sent",
        "parm": "additional information about the transfer"
      },
      "properties": {
        "ida": {
          "type": "string"
        },
        "fname": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "wfname": {
          "type": "string"
        },
        "wstates": {
          "type": "string"
        },
        "wphases": {
          "type": "string"
        },
        "wphasesteps": {
          "type": "string"
        },
        "wtimeout": {
          "type": "integer"
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "locmbx": {
          "type": "string"
        },
        "sync": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "todate": {
          "type": "string"
        },
        "totime": {
          "type": "string"
        },
        "cycdate": {
          "type": "string"
        },
        "cyctime": {
          "type": "string"
        },
        "maxdate": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "maxduration": {
          "type": "string"
        },
        "ackmindate": {
          "type": "string"
        },
        "ackmintime": {
          "type": "string"
        },
        "postmindate": {
          "type": "string"
        },
        "postmintime": {
          "type": "string"
        },
        "preexec": {
          "type": "string"
        },
        "prestate": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD"
          ]
        },
        "pretimeout": {
          "type": "string"
        },
        "premindate": {
          "type": "string"
        },
        "premintime": {
          "type": "string"
        },
        "ackexec": {
          "type": "string"
        },
        "ackstate": {
          "type": "string",
          "enum": [
            "REQUIRE",
            "IGNORE"
          ]
        },
        "acktimeout": {
          "type": "string"
        },
        "appcycid": {
          "type": "string"
        },
        "appobjid": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "cos": {
          "type": "string"
        },
        "cycle": {
          "type": "string"
        },
        "daction": {
          "type": "string",
          "enum": [
            "ERROR",
            "RESUME"
          ]
        },
        "execsub": {
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "execsuba": {
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "execsubpre": {
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "exit": {
          "type": "string"
        },
        "facc": {
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "faction": {
          "type": "string",
          "enum": [
            "ERASE",
            "DELETE",
            "NONE",
            "ROTATE"
          ]
        },
        "fblksize": {
          "type": "string"
        },
        "fcharset": {
          "type": "string"
        },
        "fcode": {
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY"
          ]
        },
        "fcomp": {
          "type": "string"
        },
        "fdb": {
          "type": "string"
        },
        "fdisp": {
          "type": "string",
          "enum": [
            "OLD",
            "SHR",
            "CHECK"
          ]
        },
        "fkeylen": {
          "type": "string"
        },
        "fkeypos": {
          "type": "string"
        },
        "flrecl": {
          "type": "string"
        },
        "forg": {
          "type": "string",
          "enum": [
            "SEQ",
            "INDEXED",
            "IND",
            "DIRECT",
            "DIR",
            "PART",
            "PAR"
          ]
        },
        "fnameabs": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "fpad": {
          "type": "string"
        },
        "frecfm": {
          "type": "string",
          "enum": [
            "F",
            "V",
            "U"
          ]
        },
        "fspace": {
          "type": "string"
        },
        "ftype": {
          "type": "string",
          "enum": [
            "B",
            "V",
            "T",
            "O",
            "X",
            "J"
          ]
        },
        "nblksize": {
          "type": "string"
        },
        "ncharset": {
          "type": "string"
        },
        "ncode": {
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY"
          ]
        },
        "ncomp": {
          "type": "string"
        },
        "netband": {
          "type": "string"
        },
        "nfname": {
          "type": "string"
        },
        "nkeylen": {
          "type": "string"
        },
        "nkeypos": {
          "type": "string"
        },
        "nlrecl": {
          "type": "string"
        },
        "notify": {
          "type": "string"
        },
        "npad": {
          "type": "string"
        },
        "nrecfm": {
          "type": "string",
          "enum": [
            "F",
            "V",
            "U"
          ]
        },
        "nspace": {
          "type": "string"
        },
        "ntype": {
          "type": "string"
        },
        "parm": {
          "type": "string"
        },
        "poststate": {
          "type": "string",
          "enum": [
            "DISP"
          ]
        },
        "posttimeout": {
          "type": "string"
        },
        "pri": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "rpasswd": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "selfname": {
          "type": "string"
        },
        "sigfname": {
          "type": "string"
        },
        "serial": {
          "type": "string",
          "enum": [
            "Y",
            "X"
          ]
        },
        "spart": {
          "type": "string"
        },
        "spasswd": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "tcycle": {
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "trk": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO"
          ]
        },
        "xlate": {
          "type": "string"
        },
        "filenotfound": {
          "type": "string",
          "enum": [
            "ABORT",
            "IGNORE"
          ]
        },
        "fdate": {
          "type": "integer"
        },
        "ftime": {
          "type": "integer"
        },
        "ipart": {
          "type": "string"
        },
        "nidf": {
          "type": "string"
        },
        "prot": {
          "type": "string"
        },
        "typ": {
          "type": "integer"
        }
      }
    },
    "TransferRequestSendMessageBody": {
      "type": "object",
      "required": [
        "msg"
      ],
      "example": {
        "msg": "Sample of Message data"
      },
      "properties": {
        "ida": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "locmbx": {
          "type": "string"
        },
        "sync": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "todate": {
          "type": "string"
        },
        "totime": {
          "type": "string"
        },
        "cycdate": {
          "type": "integer"
        },
        "cyctime": {
          "type": "integer"
        },
        "maxdate": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "maxduration": {
          "type": "integer"
        },
        "appcycid": {
          "type": "string"
        },
        "appobjid": {
          "type": "string"
        },
        "ipart": {
          "type": "string"
        },
        "pri": {
          "type": "integer"
        },
        "prot": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "spart": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "tcycle": {
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "trk": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO"
          ]
        },
        "cycle": {
          "type": "integer"
        },
        "typ": {
          "type": "integer"
        }
      }
    },
    "TransferRequestSendReplyBody": {
      "type": "object",
      "required": [
        "msg"
      ],
      "example": {
        "msg": "Validate the Transfer"
      },
      "properties": {
        "ida": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "locmbx": {
          "type": "string"
        },
        "sync": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "todate": {
          "type": "string"
        },
        "totime": {
          "type": "string"
        },
        "cycdate": {
          "type": "integer"
        },
        "cyctime": {
          "type": "integer"
        },
        "maxdate": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "maxduration": {
          "type": "integer"
        },
        "appcycid": {
          "type": "string"
        },
        "appobjid": {
          "type": "string"
        },
        "ipart": {
          "type": "string"
        },
        "pri": {
          "type": "integer"
        },
        "prot": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "spart": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "tcycle": {
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "trk": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO"
          ]
        },
        "typ": {
          "type": "integer"
        }
      }
    },
    "TransferRequestSendNackBody": {
      "type": "object",
      "required": [
        "msg"
      ],
      "example": {
        "msg": "Invalidate the transfer",
        "diag": 8
      },
      "properties": {
        "ida": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "exec": {
          "type": "string"
        },
        "exece": {
          "type": "string"
        },
        "locmbx": {
          "type": "string"
        },
        "sync": {
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "todate": {
          "type": "string"
        },
        "totime": {
          "type": "string"
        },
        "cycdate": {
          "type": "integer"
        },
        "cyctime": {
          "type": "integer"
        },
        "maxdate": {
          "type": "string"
        },
        "maxtime": {
          "type": "string"
        },
        "mindate": {
          "type": "string"
        },
        "mintime": {
          "type": "string"
        },
        "maxduration": {
          "type": "integer"
        },
        "appcycid": {
          "type": "string"
        },
        "appobjid": {
          "type": "string"
        },
        "ipart": {
          "type": "string"
        },
        "pri": {
          "type": "integer"
        },
        "prot": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "spart": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "tcycle": {
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "trk": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO"
          ]
        },
        "diag": {
          "type": "integer"
        },
        "typ": {
          "type": "integer"
        }
      }
    },
    "TransferRequestEndBody": {
      "type": "object",
      "example": {
        "diagc": "Move the transfer in status X"
      },
      "properties": {
        "diagc": {
          "type": "string"
        },
        "fname": {
          "type": "string"
        },
        "nfname": {
          "type": "string"
        },
        "sigfname": {
          "type": "string"
        },
        "rappl": {
          "type": "string"
        },
        "sappl": {
          "type": "string"
        },
        "ruser": {
          "type": "string"
        },
        "suser": {
          "type": "string"
        },
        "rpasswd": {
          "type": "string"
        },
        "spasswd": {
          "type": "string"
        },
        "istate": {
          "type": "string",
          "enum": [
            "NO",
            "YES"
          ]
        },
        "phase": {
          "type": "string"
        },
        "phasestep": {
          "type": "string"
        },
        "appstate": {
          "type": "string"
        }
      }
    },
    "RespObjectLinks": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectLinks"
        }
      }
    },
    "CftObjectsAttributes": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Attribute name",
          "type": "string"
        },
        "value": {
          "description": "Attribute value",
          "type": "string"
        }
      }
    },
    "ObjectLinks": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string",
          "description": "Relation between the link and the object. Usually equal to self."
        },
        "href": {
          "type": "string",
          "description": "Link to get created-object."
        }
      }
    },
    "ObjectSelfLinks": {
      "type": "object",
      "properties": {
        "self": {
          "description": "Self link to the Request URL."
        }
      }
    },
    "CftObjectId": {
      "description": "object id",
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    },
    "CftTcpClassId": {
      "description": "Class of the TCP local resource(s) used to establish the connection with the partner\nThe maximum is platform dependant\n- 8 Unix, Tandem\n- 16 VMS, OS400\n- 32 z/OS\n- 64 Windows",
      "type": "integer",
      "minimum": 0,
      "maximum": 64
    },
    "CftObjectUconfId": {
      "description": "Uconf definition ID.",
      "type": "string",
      "minLength": 1,
      "maxLength": 512
    },
    "CftEnumORIGIN": {
      "description": "Application Origin",
      "default": "DESIGNER",
      "type": "string",
      "enum": [
        "CFTUTIL",
        "DESIGNER",
        "COPILOT"
      ]
    },
    "CftCmdHostDetails": {
      "type": "object",
      "properties": {
        "hostname": {
          "description": "HostName",
          "type": "string"
        },
        "host_address": {
          "description": "Full TCPIP Address",
          "type": "string"
        },
        "state": {
          "description": "Copilot Server State",
          "type": "string",
          "enum": [
            "INITIALIZING",
            "STARTING",
            "RUNNING",
            "STOPPING",
            "STOPPED",
            "ERROR"
          ]
        },
        "timestamp": {
          "description": "Copilot Server start timestamp",
          "type": "string",
          "format": "date-time"
        },
        "pid": {
          "description": "Copilot Server PID or JobName (z/OS)",
          "type": "string"
        }
      }
    },
    "CftCmdNodeDetails": {
      "type": "object",
      "properties": {
        "id": {
          "description": "node ident",
          "type": "number"
        },
        "node_state": {
          "description": "Node State",
          "type": "string",
          "enum": [
            "DISABLED",
            "ENABLED_STOPPED",
            "ENABLED_STARTED",
            "DISABLING_STOPPED",
            "DISABLING_STARTED"
          ]
        },
        "cft_state": {
          "description": "CFT Server State",
          "type": "string",
          "enum": [
            "INITIALIZING",
            "STARTING",
            "RUNNING",
            "STOPPING",
            "STOPPED",
            "ERROR"
          ]
        },
        "timestamp": {
          "description": "CFT Server start timestamp",
          "type": "string",
          "format": "date-time"
        },
        "hostname": {
          "description": "HostName",
          "type": "string"
        },
        "pid": {
          "description": "Copilot Server PID or JobName (z/OS)",
          "type": "string"
        },
        "configuration_version": {
          "description": "Current configuration version",
          "type": "string"
        }
      }
    },
    "CftObjectsCftuconfList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftuconfGet"
          }
        }
      }
    },
    "CftObjectsCftuconfGet": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftuconf"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftuconfAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftuconfAttributes": {
      "type": "object",
      "properties": {
        "resolvedvalue": {
          "description": "Definition value.",
          "type": "string",
          "maxLength": 512
        },
        "value": {
          "description": "Default Value.",
          "type": "string"
        },
        "help": {
          "description": "Information about the definition.",
          "type": "string"
        },
        "type": {
          "description": "Type of definition",
          "type": "string",
          "enum": [
            "int",
            "string"
          ]
        },
        "modified": {
          "description": "Indicate origin of the sesstiong",
          "type": "string",
          "enum": [
            "USER",
            "DEFAULT"
          ]
        }
      }
    },
    "CftObjectsCftuconfSet": {
      "type": "object",
      "properties": {
        "value": {
          "description": "New parameter value.",
          "type": "string",
          "maxLength": 512
        }
      }
    },
    "CftLoginDetails": {
      "type": "object",
      "required": [
        "username",
        "token"
      ],
      "properties": {
        "username": {
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "Session Token."
        }
      }
    },
    "CftEnumXlate": {
      "description": "CFTXLATE json object type",
      "type": "string",
      "enum": [
        "cftxlatesendasciiascii",
        "cftxlatesendasciiebcdic",
        "cftxlatesendebcdicebcdic",
        "cftxlatesendebcdicascii",
        "cftxlaterecvasciiascii",
        "cftxlaterecvasciiebcdic",
        "cftxlaterecvebcdicebcdic",
        "cftxlaterecvebcdicascii"
      ]
    },
    "CftEnumObjectsType": {
      "description": "json CFT object type",
      "type": "string",
      "enum": [
        "cftpart",
        "cftsendno",
        "cftsendyes",
        "cftrecv",
        "cftdest",
        "cftauth",
        "cftapplboth",
        "cftapplsend",
        "cftapplrecv",
        "cftcron",
        "cftfolder",
        "cftrole",
        "cftpriv",
        "cftsslclient",
        "cftsslserver",
        "cftsshclient",
        "cftsshserver",
        "cftcat",
        "cftcom",
        "cftlog",
        "cftnet",
        "cftparm",
        "cftprot",
        "cftaccnt",
        "cftxlatesendasciiascii",
        "cftxlatesendasciiebcdic",
        "cftxlatesendebcdicebcdic",
        "cftxlatesendebcdicascii",
        "cftxlaterecvasciiascii",
        "cftxlaterecvasciiebcdic",
        "cftxlaterecvebcdicebcdic",
        "cftxlaterecvebcdicascii",
        "cfttoken",
        "cftexit"
      ]
    },
    "CftObjectsCftexitList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftexitGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit"
        },
        "data": [
          {
            "type": "cftexit",
            "id": "cftexitf",
            "attributes": {
              "type": "FILE",
              "language": "C",
              "prog": "CFTEXITF",
              "format": "V24",
              "comment": "File Exit definition",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit"
            }
          }
        ]
      }
    },
    "CftObjectsCftexitGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftexitGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftexit/cftexitf"
        },
        "data": {
          "type": "cftexit",
          "id": "cftexitf",
          "attributes": {
            "type": "FILE",
            "language": "C",
            "prog": "CFTEXITF",
            "format": "V24",
            "comment": "File Exit definition",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftexitGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftexit"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftexitAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftexitAttributes": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "language": {
          "description": "Programming language of the application that uses the statistical data Case Insensitive",
          "default": "COBOL",
          "type": "string",
          "enum": [
            "COBOL",
            "C"
          ]
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "parm": {
          "description": "Passes information from the EXIT to the user application The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 64
        },
        "prog": {
          "description": "The executable module (length of 512 characters) that corresponds to the EXIT task to activate The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "default": "CFTEXIT",
          "type": "string",
          "maxLength": 512
        },
        "format": {
          "description": "Format for the communication area.",
          "default": "V23",
          "type": "string",
          "enum": [
            "V23",
            "V24"
          ]
        },
        "type": {
          "description": "Exit type Case Insensitive",
          "default": "FILE",
          "type": "string",
          "enum": [
            "FILE",
            "ACCESS",
            "ETEBAC",
            "EXEC"
          ]
        },
        "reserv": {
          "description": "Size, in bytes, of the user work area. The default is 16384 for a FILE type exit, otherwise it is 1024. The maximum is 16384 for a FILE type exit, otherwise it is 8192.",
          "type": "integer",
          "minimum": 0
        },
        "waittask": {
          "description": "Use this field to set the inactivity time of the EXIT task. Valid only for FILE or ACCESS type exits. ",
          "type": "integer",
          "minimum": 1,
          "maximum": 1441,
          "default": 1441
        }
      }
    },
    "CftObjectsCfttokenList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCfttokenGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken"
        },
        "data": [
          {
            "type": "cfttoken",
            "id": "USER1",
            "attributes": {
              "value": [
                "aa.BB.CC",
                "aa.cc.dd"
              ],
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/USER1"
            }
          },
          {
            "type": "cfttoken",
            "id": "usertwo",
            "attributes": {
              "value": [
                "aa.CB.CD"
              ],
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/usertwo"
            }
          }
        ]
      }
    },
    "CftObjectsCfttokenGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCfttokenGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cfttoken/USER1"
        },
        "data": {
          "type": "cfttoken",
          "id": "USER1",
          "attributes": {
            "value": [
              "aa.BB.CC",
              "bb.cc.dd"
            ],
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCfttokenGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cfttoken"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCfttokenAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCfttokenAttributes": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "List of Token Value",
          "type": "array",
          "maxItems": 2,
          "items": {
            "type": "string",
            "maxLength": 2048
          }
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftxlateList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftxlateGetInfo"
          }
        }
      }
    },
    "CftObjectsCftxlateGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftxlateGetInfo"
        }
      }
    },
    "CftObjectsCftxlateGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftxlatesendasciiascii"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftxlateAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftxlateAttributes": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "table": {
          "description": "Table in Hexadecimal value",
          "type": "string",
          "minLength": 512,
          "maxLength": 512
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftaccntList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftaccntGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt"
        },
        "data": [
          {
            "type": "cftaccnt",
            "id": "fileaccounting",
            "attributes": {
              "comment": "Sample definition file accounting",
              "type": "FILE",
              "fname": "accounting_file",
              "afname": "alternate accounting_file",
              "exec": "switch_procedure",
              "maxrec": 5000,
              "language": "C",
              "format": "V24",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt/fileaccounting"
            }
          }
        ]
      }
    },
    "CftObjectsCftaccntGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftaccntGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftaccnt/fileaccounting"
        },
        "data": {
          "type": "cftaccnt",
          "id": "fileaccounting",
          "attributes": {
            "comment": "Sample definition file accounting",
            "type": "FILE",
            "fname": "accounting_file",
            "afname": "alternate accounting_file",
            "exec": "switch_procedure",
            "maxrec": 5000,
            "language": "C",
            "format": "V24",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftaccntGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftaccnt"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftaccntAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftaccntAttributes": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "type": {
          "description": "Accounting type Case Insensitive",
          "default": "FILE",
          "type": "string",
          "enum": [
            "FILE",
            "SYST"
          ]
        }
      }
    },
    "CftObjectsCftaccntAttributesTypeSyst": {
      "description": "Definition of accnt object of SYST type",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftaccntAttributes"
        },
        {
          "type": "object",
          "properties": {
            "accid": {
              "description": "This is only available on z/OS (when TYPE=SYST). - z/OS : 128",
              "type": "integer",
              "minimum": 0,
              "maximum": 4294967295
            },
            "language": {
              "description": "Programming language of the application using the statistical data records Case Insensitive",
              "default": "COBOL",
              "type": "string",
              "enum": [
                "COBOL",
                "C"
              ]
            },
            "format": {
              "description": "Indicates the record structure format.",
              "default": "V23",
              "type": "string",
              "enum": [
                "V23",
                "V24"
              ]
            }
          },
          "example": {
            "type": "syst",
            "comment": "Sample definition system accounting",
            "accid": 20,
            "language": "C",
            "format": "V24",
            "origin": "DESIGNER"
          }
        }
      ]
    },
    "CftObjectsCftaccntAttributesTypeFile": {
      "description": "Definition of accnt object of FILE type",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftaccntAttributes"
        },
        {
          "type": "object",
          "properties": {
            "afname": {
              "description": "Name of the alternate statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 512
            },
            "exec": {
              "description": "Name of the procedure to be executed when Transfer CFT switches to the other statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 512
            },
            "fname": {
              "description": "Name of the statistical file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 512
            },
            "maxrec": {
              "description": "Statistical file's  maximum number of records",
              "type": "integer",
              "minimum": 0,
              "maximum": 4294967295,
              "default": 0
            },
            "language": {
              "description": "Programming language of the application using the statistical data records Case Insensitive",
              "default": "COBOL",
              "type": "string",
              "enum": [
                "COBOL",
                "C"
              ]
            },
            "switch": {
              "description": "Transfer CFT automatically switches to the alternate statistical file at this time",
              "type": "integer",
              "minimum": 0,
              "maximum": 23595999,
              "default": 0
            },
            "format": {
              "description": "Indicates the record structure format.",
              "default": "V23",
              "type": "string",
              "enum": [
                "V23",
                "V24"
              ]
            }
          },
          "example": {
            "type": "FILE",
            "comment": "Sample definition file accounting",
            "fname": "accounting_file",
            "afname": "alternate accounting_file",
            "exec": "switch_procedure",
            "maxrec": 5000,
            "language": "C",
            "format": "V24",
            "origin": "DESIGNER"
          }
        }
      ]
    },
    "CftObjectsCftprotList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftprotGetInfo"
          }
        }
      }
    },
    "CftObjectsCftprotGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftprotGetInfo"
        }
      }
    },
    "CftObjectsCftprotGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftprot"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftprotAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftprotAttributes": {
      "type": "object",
      "discriminator": "type",
      "required": [
        "net",
        "type"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "cos": {
          "description": "Class Of Service for bandwidth control",
          "type": "string",
          "maxLength": 32
        },
        "dynam": {
          "description": "Dynamic partner identifier (8 characters) in server mode Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "exita": {
          "description": "Identifier for the directory EXIT Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "fcharset": {
          "description": "Local file encoding",
          "type": "string",
          "maxLength": 32
        },
        "idf": {
          "description": "Assigns an IDF to a file on receiving an NIDF Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "ncharset": {
          "description": "Destination file encoding",
          "type": "string",
          "maxLength": 32
        },
        "net": {
          "description": "Identifier referring to a CFTNET command associated with this protocol Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "sap": {
          "description": "Name of the local SAP, Service Access Point, associated with this protocol Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "srin": {
          "description": "Controls the direction of transfers authorized for the Transfer CFT when it is server, accepter of the protocol connection Case Insensitive",
          "default": "BOTH",
          "type": "string",
          "enum": [
            "SENDER",
            "RECEIVER",
            "BOTH",
            "NONE"
          ]
        },
        "srout": {
          "description": "Controls the direction of transfers authorized for the Transfer CFT when it is requester (initiator of the protocol connection Case Insensitive",
          "default": "BOTH",
          "type": "string",
          "enum": [
            "SENDER",
            "RECEIVER",
            "BOTH",
            "NONE"
          ]
        },
        "type": {
          "description": "Type of file transfer protocol.",
          "type": "string",
          "enum": [
            "ODETTE",
            "PESIT",
            "EBICS",
            "SFTP"
          ]
        }
      }
    },
    "CftObjectsCftprotAttributesTypeSftp": {
      "description": "Definition of a SFTP protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributes"
        },
        {
          "type": "object",
          "properties": {
            "disctc": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new connection request",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 60
            },
            "disctd": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 10
            },
            "discts": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 60
            },
            "restart": {
              "description": "Maximum number of transfer restart attempts",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 5
            },
            "rcomp": {
              "description": "Maximum compression authorized on receiving a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 9,
              "default": 1
            },
            "scomp": {
              "description": "Maximum authorized compression for sending a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 9,
              "default": 1
            },
            "rto": {
              "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 120
            },
            "srusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent  - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 254,
              "default": 32750
            },
            "rrusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 254,
              "default": 32750
            },
            "spacing": {
              "description": "Interval between synchronization points for send transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 32767
            },
            "rpacing": {
              "description": "The \"credit\", expressed as a number of \"DATA\" messages, proposed by Transfer CFT when it is server",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 32767
            },
            "ssh": {
              "description": "SSH command identifier used for a security profile Case Insensitive",
              "type": "string",
              "maxLength": 32
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypeEbics": {
      "description": "Definition of an EBICS protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributes"
        },
        {
          "type": "object",
          "properties": {
            "ssl": {
              "description": "SSL command identifier used for security profiles Case Insensitive",
              "type": "string",
              "maxLength": 32
            },
            "version": {
              "description": "Protocol version Case Insensitive",
              "type": "string",
              "enum": [
                "H002",
                "H003"
              ]
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypeEbicsVersionH003": {
      "description": "Definition of an EBICS protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributesTypeEbics"
        },
        {
          "type": "object",
          "properties": {
            "prof": {
              "description": "Protocol profile Case Insensitive",
              "type": "string",
              "enum": [
                "A004K",
                "A005K",
                "A005C",
                "A006K",
                "A006C"
              ]
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypeEbicsVersionH002": {
      "description": "Definition of an EBICS protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributesTypeEbics"
        },
        {
          "type": "object",
          "properties": {
            "prof": {
              "description": "Protocol profile Case Insensitive",
              "type": "string",
              "enum": [
                "A004K"
              ]
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypePesit": {
      "required": [
        "prof"
      ],
      "discriminator": "prof",
      "description": "Definition of a PESIT protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributes"
        },
        {
          "type": "object",
          "properties": {
            "ssl": {
              "description": "SSL command identifier used for security profiles Case Insensitive",
              "type": "string",
              "maxLength": 32
            },
            "prof": {
              "description": "PeSIT D or E protocol profile.",
              "type": "string",
              "enum": [
                "ANY"
              ]
            },
            "concat": {
              "description": "Option to concatenate FPDUs (File Protocol Data Units) in a given NSDU Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "disctc": {
              "description": "Wait timeout (in seconds) for the reply FPDU (ACONNECT), after the sending of a CONNECT FPDU",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 90
            },
            "disctd": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 240
            },
            "disctr": {
              "description": "Network disconnection wait timeout",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 45
            },
            "discts": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 285
            },
            "multart": {
              "description": "Option to group several records of the file sent in a given FPDU (multi-record FPDUs) Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "NO"
              ]
            },
            "pad": {
              "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "NO"
              ]
            },
            "rchkw": {
              "description": "Size of the receive mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
              "type": "integer",
              "minimum": 0,
              "maximum": 16,
              "default": 2
            },
            "rcomp": {
              "description": "Maximum compression authorized on receiving a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 0,
              "default": 0
            },
            "restart": {
              "description": "Maximum number of transfer restart attempts",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 5
            },
            "resync": {
              "description": "Dynamic resynchronization of exchanges during transfer (without interrupting the data exchange phase) Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "NO"
              ]
            },
            "rpacing": {
              "description": "Value of the interval between synchronization points for receive transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 36
            },
            "rrusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 800,
              "default": 4050
            },
            "rto": {
              "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 260
            },
            "schkw": {
              "description": "Size of the send mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
              "type": "integer",
              "minimum": 0,
              "maximum": 16,
              "default": 2
            },
            "scomp": {
              "description": "Maximum authorized compression for sending a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 0,
              "default": 0
            },
            "segment": {
              "description": "Segment files records in several FPDUs Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "NO"
              ]
            },
            "spacing": {
              "description": "Interval between synchronization points for send transfers (in Kbytes where 1 Kbyte=1024 bytes)",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 36
            },
            "srusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent  - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 800,
              "default": 4050
            },
            "reverse": {
              "description": "Reuse a connection to perform two transfers in different directions one after the other Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "NO"
              ]
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypePesitProfAny": {
      "description": "Definition of a PESIT protocol, profile ANY",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributesTypePesit"
        },
        {
          "type": "object",
          "properties": {
            "concat": {
              "description": "Concatenate FPDUs (File Protocol Data Units) in a given NSDU Case Insensitive",
              "default": "YES",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "multart": {
              "description": "Group several records of the file sent in a given FPDU (multi-record FPDUs) Case Insensitive",
              "default": "YES",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "pad": {
              "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "rchkw": {
              "description": "Size of the receive mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
              "type": "integer",
              "minimum": 0,
              "maximum": 16,
              "default": 3
            },
            "restart": {
              "description": "Maximum number of transfer restart attempts",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 5
            },
            "resync": {
              "description": "Dynamic resynchronization of exchanges during transfer (without interrupting the data exchange phase) Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "reverse": {
              "description": "Reuses a connection to perform two transfers in different directions one after the other Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "rpacing": {
              "description": "Value of the interval between synchronization points for receive transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 32767
            },
            "rrusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 254,
              "default": 32750
            },
            "rserv": {
              "description": "Identifies the service (protocol variant) required by the incoming partner Case Insensitive",
              "type": "string",
              "maxLength": 8
            },
            "rto": {
              "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 260
            },
            "schkw": {
              "description": "Size of the send mode synchronization point's anticipated acknowledgment window, expressed as a number of synchronization points",
              "type": "integer",
              "minimum": 0,
              "maximum": 16,
              "default": 3
            },
            "segment": {
              "description": "Segment file records in several FPDUs Case Insensitive",
              "default": "YES",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "spacing": {
              "description": "Value of the interval between synchronization points for send transfers (in Kbytes) (1 Kbyte = 1024 bytes)",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 32767
            },
            "srusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent  - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 254,
              "default": 32750
            },
            "disctc": {
              "description": "Wait timeout (in seconds) for the reply FPDU (ACONNECT), after the sending of a CONNECT FPDU",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 60
            },
            "disctd": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 10
            },
            "disctr": {
              "description": "Network disconnection wait timeout",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 45
            },
            "discts": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 60
            },
            "logon": {
              "description": "Implementation of the pre-connection phase Case Insensitive",
              "default": "YES",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "rcomp": {
              "description": "Maximum compression authorized on receiving a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 15,
              "default": 0
            },
            "scomp": {
              "description": "Maximum authorized compression for sending a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 15,
              "default": 0
            },
            "sserv": {
              "description": "Identifies the service (protocol variant) required for the incoming partner Case Insensitive",
              "default": "GSIT",
              "type": "string",
              "maxLength": 8
            },
            "hide99": {
              "description": "Optional parameter available only to PESIT protocol definition (TYPE=PESIT) using the ANY profile (PROFIL=ANY/CFT) Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "nack": {
              "description": "PESIT: Enables or disables the negative acknowledgment feature Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            }
          }
        }
      ]
    },
    "CftObjectsCftprotAttributesTypeOdette": {
      "description": "Definition of an ODETTE protocol",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftprotAttributes"
        },
        {
          "type": "object",
          "properties": {
            "ssl": {
              "description": "SSL command identifier used for security profiles Case Insensitive",
              "type": "string",
              "maxLength": 32
            },
            "disctd": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request to the partner, in requester mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 20
            },
            "discts": {
              "description": "Wait timeout (in seconds) before disconnection, in the absence of a new transfer request from the partner, in server mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 3600,
              "default": 65
            },
            "eerp": {
              "description": "Interprets the value of the ORIGINATOR and DESTINATOR fields contained in the EERP message, according to the protocol version Case Insensitive",
              "default": 91,
              "type": "string",
              "enum": [
                "91",
                "86"
              ]
            },
            "pad": {
              "description": "Applies \"SPECIAL LOGIC\" to the data exchange buffers Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "rcomp": {
              "description": "Maximum compression authorized on receiving a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            "rcredit": {
              "description": "Value of the \"credit\" (expressed as a number of \"DATA\" messages) proposed by Transfer CFT when it is server",
              "type": "integer",
              "minimum": 0,
              "maximum": 999,
              "default": 4
            },
            "restart": {
              "description": "Maximum number of transfer restart attempts",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 5
            },
            "resync": {
              "description": "Dynamic resynchronization of exchanges during a transfer (without interrupting the data exchange phase) Case Insensitive",
              "default": "NO",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "reverse": {
              "description": "Reuses a connection to perform two transfers in different directions one after the other Case Insensitive",
              "default": "YES",
              "type": "string",
              "enum": [
                "YES",
                "NO"
              ]
            },
            "rrusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being received Maximum value depends on the platform: - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 128,
              "default": 2048
            },
            "rto": {
              "description": "Network monitoring timeout (expressed in seconds) excluding the protocol connection/disconnection/break phase",
              "type": "integer",
              "minimum": 0,
              "maximum": 32767,
              "default": 260
            },
            "scomp": {
              "description": "Maximum authorized compression for sending a file",
              "type": "integer",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            "scredit": {
              "description": "Value of the \"credit\" (expressed as a number of \"DATA\" messages) proposed by Transfer CFT when it is the requester",
              "type": "integer",
              "minimum": 0,
              "maximum": 999,
              "default": 4
            },
            "srusize": {
              "description": "Maximum size of NSDUs (Network Service Data Unit) being sent Maximum value - platform dependent  - z/OS: 65072 - Windows, Unix, IBM i: 32750",
              "type": "integer",
              "minimum": 128,
              "default": 2048
            },
            "tcp": {
              "description": "Processing method used for protocol messages Case Insensitive",
              "default": "OFTP",
              "type": "string",
              "maxLength": 8
            }
          }
        }
      ]
    },
    "CftObjectsCftparmList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftparmGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm"
        },
        "data": [
          {
            "type": "cftparm",
            "id": "idparm2",
            "attributes": {
              "bufsize": 4096,
              "cat": "CAT0",
              "com": [
                "COM0",
                "COMS"
              ],
              "default": "BIN",
              "fbufsize": 0,
              "key": "cft.key",
              "lenappl": 32,
              "log": "LOG0",
              "maxtask": 4,
              "maxtrans": 999,
              "net": [
                "NET0"
              ],
              "npart": "LOCAL",
              "part": "LOCAL",
              "partfnam": "cftpart_file",
              "pkifname": "pkifile_name",
              "pkipassw": "<CFT_PASSWORD>AAAAAAAAA",
              "prot": [
                "PESITANY"
              ],
              "rcvaller": "STOP",
              "sndindfileerr": "CONTINUE",
              "sslmtask": 1,
              "sslttask": 128,
              "sslwtask": 1441,
              "sslwresp": 60,
              "strace": 0,
              "trantask": 64,
              "trkpart": "UNDEFINED",
              "trksend": "UNDEFINED",
              "trkrecv": "UNDEFINED",
              "userctrl": "NO",
              "waitresp": 60,
              "waittask": 1441,
              "comment": "Transfer CFT central definition",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm/idparm2"
            }
          }
        ]
      }
    },
    "CftObjectsCftparmGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftparmGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftparm/idparm2"
        },
        "data": {
          "type": "cftparm",
          "id": "idparm2",
          "attributes": {
            "bufsize": 4096,
            "cat": "CAT0",
            "com": [
              "COM0",
              "COMS"
            ],
            "default": "BIN",
            "fbufsize": 0,
            "key": "cft.key",
            "lenappl": 32,
            "log": "LOG0",
            "maxtask": 4,
            "maxtrans": 999,
            "net": [
              "NET0"
            ],
            "npart": "LOCAL",
            "part": "LOCAL",
            "partfnam": "cftpart_file",
            "pkifname": "pkifile_name",
            "pkipassw": "<CFT_PASSWORD>AAAAAAAAA",
            "prot": [
              "PESITANY"
            ],
            "rcvaller": "STOP",
            "sndindfileerr": "CONTINUE",
            "sslmtask": 1,
            "sslttask": 128,
            "sslwtask": 1441,
            "sslwresp": 60,
            "strace": 0,
            "trantask": 64,
            "trkpart": "UNDEFINED",
            "trksend": "UNDEFINED",
            "trkrecv": "UNDEFINED",
            "userctrl": "NO",
            "waitresp": 60,
            "waittask": 1441,
            "comment": "Transfer CFT central definition",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftparmGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftparm"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftparmAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftparmAttributes": {
      "type": "object",
      "required": [
        "cat",
        "com",
        "key",
        "net",
        "part",
        "partfnam",
        "prot"
      ],
      "properties": {
        "accnt": {
          "description": "Identifier of the description command of the statistical data record of the transfers Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "bufsize": {
          "description": "Size of the internal buffer used to exchange data between tasks, expressed in bytes. The default value depends on the platform. - z/OS : 65200 - Windows : 4096 - IBM i : 32740 - Unix : 4096 - VMS : 8100, this value is also the VMS maximum.",
          "type": "integer",
          "minimum": 512,
          "maximum": 65535
        },
        "cat": {
          "description": "Identifier of the command describing catalog file management Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "com": {
          "description": "List of the identifiers of the communication media description commands Case Insensitive",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "crontabs": {
          "description": "List of the identifiers of the script scheduling command CFTCRON Case Insensitive",
          "type": "array",
          "maxItems": 32,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "default": {
          "description": "The CFTRECV, CFTSEND, and CFTXLATE command default identifier. Case insensitive. The default value depends on the platform. - z/OS : BIN - Others : DEFAUT",
          "type": "string",
          "maxLength": 32
        },
        "execre": {
          "description": "File descibing the procedure to execute following a file reception error The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execrf": {
          "description": "File describing the procedure to execute on completion of the reception of a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execrm": {
          "description": "File describing the procedure to execute on completion of the reception of a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execse": {
          "description": "File descibing the procedure to execute following a file sending error The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execsf": {
          "description": "File describing the procedure to execute on completion of the sending of a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execsfa": {
          "description": "File describing the procedures to execute when receiving an acknowledgement for a file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execsm": {
          "description": "File describing the procedure to execute on completion of the sending of a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execsma": {
          "description": "File describing the procedures to execute when receiving an acknowledgement for a message The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "exiteot": {
          "description": "EXIT identifier Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "fbufsize": {
          "description": "Size of the internal buffer used to exchange data between Transfer CFT tasks and Transfer CFT file tasks. Maximum value is 8100 on OpenVMS platforms.",
          "type": "integer",
          "minimum": 0,
          "maximum": 65535,
          "default": 0
        },
        "key": {
          "description": "File containing the set of keys associated with the Transfer CFT The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 80
        },
        "lenappl": {
          "description": "Length to be taken into account when comparing the file/message identifier with the identifier of a CFTAPPL command",
          "type": "integer",
          "minimum": 1,
          "maximum": 32,
          "default": 32
        },
        "log": {
          "description": "Identifier of the monitor event log file description command CFTLOG Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "maxtask": {
          "description": "Number of authorized Transfer CFT file tasks. Maximum value on platforms: - z/OS : 400 - Windows, IBM i, Unix, OpenVMS : 64",
          "type": "integer",
          "default": 8,
          "minimum": 1
        },
        "maxtrans": {
          "description": "Maximum authorized number of transfers in parallel ; when using multi node, this is the number of transfers per node",
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 256
        },
        "net": {
          "description": "List of the identifiers of the description commands for network access methods and monitor network resources CFTNET Case Insensitive",
          "type": "array",
          "maxItems": 32,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "npart": {
          "description": "Default network identifier of the local site Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "part": {
          "description": "Local identifier, identifying the site on which Transfer CFT is executed Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "partfnam": {
          "description": "Partner file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "pkifname": {
          "description": "PKI certificates base filename",
          "type": "string",
          "maxLength": 512
        },
        "pkipassw": {
          "description": "PKI certificates base password",
          "default": "PKIPASSW",
          "type": "string",
          "maxLength": 32
        },
        "prot": {
          "description": "Identifier of the Transfer CFT protocol description commands CFTPROT Case Insensitive",
          "type": "array",
          "maxItems": 32,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "rcvaller": {
          "description": "Option to be used if an error occurs when receiving available files FILE=ALL option Case Insensitive",
          "default": "STOP",
          "type": "string",
          "enum": [
            "STOP",
            "CONTINUE"
          ]
        },
        "secfname": {
          "description": "Name of the CFT internal security file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "sndindfileerr": {
          "description": "Action to do if error while sending using indirection file Case Insensitive",
          "default": "CONTINUE",
          "type": "string",
          "enum": [
            "ABORT",
            "CONTINUE"
          ]
        },
        "sslmtask": {
          "description": "Maximum number of SSL tasks",
          "type": "integer",
          "minimum": 1,
          "maximum": 64,
          "default": 8
        },
        "sslttask": {
          "description": "Maximum number of transfers per Transfer CFT SSL task. Maximum value on platforms: - Windows: 1000 - z/OS, IBM i, Unix, OpenVMS : 64",
          "type": "integer",
          "default": 3,
          "minimum": 1
        },
        "sslwtask": {
          "description": "SSL timer for task",
          "type": "integer",
          "minimum": 1,
          "maximum": 1441,
          "default": 10
        },
        "sslwresp": {
          "description": "The time limit for the SSL task to initialize before it times out (in seconds). Default value - platform dependent. - z/OS : 600 - Windows and OpenVMS : 60 - Unix : 100 - IBM i : 1000",
          "type": "integer",
          "minimum": 1,
          "maximum": 32767
        },
        "strace": {
          "description": "Trace level for system services",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "trantask": {
          "description": "Maximum number of parallel transfers per task. Maximum value on platforms: - Windows: 1000 - z/OS, IBM i, Unix, OpenVMS : 64",
          "type": "integer",
          "default": 3,
          "minimum": 1
        },
        "trkpart": {
          "description": "Details provided to Sentinel about transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "trksend": {
          "description": "Details provided to Sentinel about sent transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "trkrecv": {
          "description": "Details provided to Sentinel about received transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "userctrl": {
          "description": "Transferred file access control option Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "waitresp": {
          "description": "The time that a Transfer CFT task waits before it times out (in seconds). Default value depend on platforms: - z/OS : 600 - Windows and OpenVMS : 60 - Unix : 100 - IBM i : 1000",
          "type": "integer",
          "minimum": 1,
          "maximum": 32767
        },
        "waittask": {
          "description": "Time during which a file access task is inactive in minutes before being shut down",
          "type": "integer",
          "minimum": 1,
          "maximum": 1441,
          "default": 10
        }
      }
    },
    "CftObjectsCftnetList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftnetGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet"
        },
        "data": [
          {
            "type": "cftnet",
            "id": "basetcp",
            "attributes": {
              "type": "TCP",
              "comment": "Sample definition TCP network",
              "host": "INADDR_ANY",
              "maxcnx": 300,
              "call": "INOUT",
              "srcports": "5000-65535",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/basetcp"
            }
          },
          {
            "type": "cftnet",
            "id": "inonlytcp",
            "attributes": {
              "type": "TCP",
              "comment": "Sample definition for TCP incoming connection only",
              "host": "INADDR_ANY",
              "maxcnx": 200,
              "call": "IN",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/inonlytcp"
            }
          }
        ]
      }
    },
    "CftObjectsCftnetGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftnetGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftnet/basetcp"
        },
        "data": {
          "type": "cftnet",
          "id": "basetcp",
          "attributes": {
            "type": "TCP",
            "comment": "Sample definition for the TCP network",
            "host": "INADDR_ANY",
            "maxcnx": 300,
            "call": "INOUT",
            "srcports": "5000-65535",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftnetGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftnet"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftnetAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftnetAttributes": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "call": {
          "description": "Call direction possible through this network resource Case Insensitive",
          "default": "INOUT",
          "type": "string",
          "enum": [
            "INOUT",
            "OUT",
            "IN"
          ]
        },
        "class": {
          "description": "Maximum value depends on the platform: - z/OS : 32 - Windows : 64 - Unix : 8 - IBM i : 16 - VMS : 16",
          "type": "integer",
          "minimum": 0,
          "default": 1
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "maxcnx": {
          "description": "Maximum value depends on the platform: - z/OS : 990 - Windows,Unix,IBM i,VMS : 2000",
          "type": "integer",
          "minimum": 1,
          "default": 384
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "type": {
          "description": "Local or remote resource type.",
          "type": "string",
          "enum": [
            "TCP"
          ]
        }
      }
    },
    "CftObjectsCftnetAttributesTypeTcp": {
      "description": "Definition of CFTTCP object.",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftnetAttributes"
        },
        {
          "type": "object",
          "properties": {
            "protocol": {
              "description": "The proxy dialog protocol ; Transfer CFT supports SOCKS4 and SOCKS5 Case Insensitive",
              "default": " ",
              "type": "string",
              "enum": [
                "GENERIC",
                "SOCKS4",
                "SOCKS5",
                "SR",
                " "
              ]
            },
            "inet": {
              "description": "Identifier of the CFTNET command defining access to the first network Case Insensitive",
              "type": "string",
              "maxLength": 32
            },
            "host": {
              "description": "Resource address The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 64
            },
            "parm": {
              "description": "Host parameter",
              "type": "string",
              "maxLength": 512
            },
            "port": {
              "description": "Listening port of the proxy/proxies in the first network",
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          "example": {
            "type": "TCP",
            "comment": "Sample definition for TCP incoming connection only",
            "host": "INADDR_ANY",
            "maxcnx": 200,
            "call": "IN"
          }
        }
      ]
    },
    "CftObjectsCftlogList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftlogGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog"
        },
        "data": [
          {
            "type": "cftlog",
            "id": "log2",
            "attributes": {
              "afname": "alternate_file",
              "content": "FULL",
              "exec": "Switch_log_procedure",
              "fname": "log_file",
              "length": 160,
              "opermsg": 0,
              "maxrec": 0,
              "notify": "        ",
              "switch": "00000000",
              "ntf": "NO",
              "ntftyp": "EF",
              "comment": "Transfer CFT log file",
              "format": "V24",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog/log2"
            }
          }
        ]
      }
    },
    "CftObjectsCftlogGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftlogGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftlog/log2"
        },
        "data": {
          "type": "cftlog",
          "id": "log2",
          "attributes": {
            "afname": "alternate_file",
            "content": "FULL",
            "exec": "Switch_log_procedure",
            "fname": "log_file",
            "length": 160,
            "opermsg": 0,
            "maxrec": 0,
            "notify": "        ",
            "switch": "00000000",
            "ntf": "NO",
            "ntftyp": "EF",
            "comment": "Transfer CFT log file",
            "format": "V24",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftlogGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftlog"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftlogAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftlogAttributes": {
      "type": "object",
      "required": [
        "fname"
      ],
      "properties": {
        "afname": {
          "description": "Name of the alternate log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "content": {
          "description": "Message filter Case Insensitive",
          "default": "FULL",
          "type": "string",
          "enum": [
            "FULL",
            "BRIEF"
          ]
        },
        "exec": {
          "description": "Name of the procedure to be executed when switching to the other log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "fname": {
          "description": "Name of the log file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "length": {
          "description": "Size of log file records. The default value is 256 for z/OS and IBM i plateforms and 160 for the others.",
          "type": "integer",
          "minimum": 0,
          "maximum": 1024
        },
        "opermsg": {
          "description": "Transfer information message categories intended for the operator",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "maxrec": {
          "description": "Number of records written in the log file, from which automatic switching will be performed",
          "type": "integer",
          "minimum": 0,
          "maximum": 4294967295,
          "default": 0
        },
        "notify": {
          "description": "Destination of the operator messages selected according to the value of the OPERMSG parameter The default value is OP for z/OS and VMS plateforms and space for the others. Case Insensitive for z/OS, VMS and IBM i plateforms.",
          "type": "string",
          "maxLength": 32
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "switch": {
          "description": "Time at which Transfer CFT performs an automatic switch",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "ntf": {
          "description": "Notification of events from Transfer CFT to the XNTF agent Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "ntftyp": {
          "description": "Character string indicating the type of messages for which a notification occurs Case Insensitive",
          "default": "EF",
          "type": "string",
          "maxLength": 7
        },
        "ntfalert": {
          "description": "List of Transfer CFT message identifiers that are notified with an alert Case Insensitive",
          "type": "array",
          "maxItems": 10,
          "items": {
            "type": "string",
            "maxLength": 7
          }
        },
        "format": {
          "description": "Indicates the log messages format",
          "default": "V23",
          "type": "string",
          "enum": [
            "V23",
            "V24"
          ]
        }
      }
    },
    "CftObjectsCftcomList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftcomGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom"
        },
        "data": [
          {
            "type": "cftcom",
            "id": "comfile",
            "attributes": {
              "type": "file",
              "comment": "Sample definition for a file communication media with a scan every 5 seconds",
              "wscan": 5,
              "name": "com_file_name",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comfile"
            }
          },
          {
            "type": "cftcom",
            "id": "comtcp",
            "attributes": {
              "type": "TCPIP",
              "comment": "Sample definition for synchronous API requests",
              "host": "127.0.0.1",
              "port": 33004,
              "protocol": "xhttp",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comtcp"
            }
          }
        ]
      }
    },
    "CftObjectsCftcomGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftcomGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcom/comfile"
        },
        "data": {
          "type": "cftcom",
          "id": "comfile",
          "attributes": {
            "type": "file",
            "comment": "Sample definition for the file communication media with a scan every 5 seconds",
            "wscan": 5,
            "name": "com_file_name",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftcomGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftcom"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftcomAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftcomAttributes": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "type": {
          "description": "Transfer CFT communication media. ",
          "type": "string",
          "enum": [
            "FILE",
            "TCPIP"
          ]
        }
      }
    },
    "CftObjectsCftcomAttributesTypeTcpip": {
      "description": "A definition for a CFTCOM object with TYPE=TCPIP",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftcomAttributes"
        },
        {
          "type": "object",
          "properties": {
            "addrlist": {
              "description": "List of authorized addresses that you can use to connect to the communication media The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "array",
              "maxItems": 16,
              "items": {
                "type": "string",
                "maxLength": 64
              }
            },
            "discts": {
              "description": "Wait timeout, in seconds, before disconnection, in the absence of a new transfer request from the partner, in server mode",
              "type": "integer",
              "minimum": 0,
              "maximum": 86400,
              "default": 60
            },
            "host": {
              "description": "Networking IP address of the local resource Case Insensitive",
              "type": "string",
              "maxLength": 64
            },
            "port": {
              "description": "Listening port of the network",
              "type": "integer",
              "minimum": 0,
              "maximum": 65535
            },
            "protocol": {
              "description": "Remote TCP network resource Case Insensitive",
              "type": "string",
              "maxLength": 6
            },
            "wscan": {
              "description": "Frequency, in seconds, with which the Transfer CFT scans the communication file",
              "type": "integer",
              "minimum": 1,
              "maximum": 3600,
              "default": 60
            },
            "ssl": {
              "description": "SSL command identifier used for security profiles Case Insensitive",
              "type": "string",
              "maxLength": 32
            }
          },
          "example": {
            "type": "TCPIP",
            "comment": "Sample definition for synchronous API requests",
            "host": "127.0.0.1",
            "port": 33004,
            "protocol": "xhttp"
          }
        }
      ]
    },
    "CftObjectsCftcomAttributesTypeFile": {
      "description": "Definition of a communication media of type FILE",
      "allOf": [
        {
          "$ref": "#/definitions/CftObjectsCftcomAttributes"
        },
        {
          "type": "object",
          "properties": {
            "fname": {
              "description": "Communication file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 512
            },
            "name": {
              "description": "Communication file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
              "type": "string",
              "maxLength": 512
            },
            "wscan": {
              "description": "Frequency, in seconds, with which the Transfer CFT scans the communication file",
              "type": "integer",
              "minimum": 1,
              "maximum": 3600,
              "default": 60
            }
          },
          "example": {
            "type": "FILE",
            "comment": "Sample definition for file communication media with scan every 5 seconds",
            "wscan": 5,
            "name": "com_file_name"
          }
        }
      ]
    },
    "CftObjectsCftcatList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftcatGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat"
        },
        "data": [
          {
            "type": "cftcat",
            "id": "cat2",
            "attributes": {
              "cache": 256,
              "fname": "catalog_file",
              "rkerror": "keep",
              "rh": 10,
              "rt": 10,
              "ry": 10,
              "rx": 10,
              "sh": 10,
              "st": 10,
              "sy": 10,
              "sx": 10,
              "timep": 23595999,
              "updat": 256,
              "wscan": 5,
              "tvlclear": 70,
              "tvlwarn": 80,
              "tvlwrate": 60,
              "ntf": "NO",
              "ntfstate": "CDHKTX",
              "comment": "Transfer CFT catalog file",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat/cat2"
            }
          }
        ]
      }
    },
    "CftObjectsCftcatGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftcatGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcat/cat2"
        },
        "data": {
          "type": "cftcat",
          "id": "cat2",
          "attributes": {
            "cache": 256,
            "fname": "catalog_file",
            "rkerror": "keep",
            "rh": 10,
            "rt": 10,
            "ry": 10,
            "rx": 10,
            "sh": 10,
            "st": 10,
            "sy": 10,
            "sx": 10,
            "timep": 23595999,
            "updat": 256,
            "wscan": 5,
            "tvlclear": 70,
            "tvlwarn": 80,
            "tvlwrate": 60,
            "ntf": "NO",
            "ntfstate": "CDHKTX",
            "comment": "Transfer CFT catalog file",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftcatGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftcat"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftcatAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftcatAttributes": {
      "type": "object",
      "required": [
        "fname"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "fname": {
          "description": "Catalog file name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "rkerror": {
          "description": "Action to take if a transfer aborts during the selection phase in server mode Case Insensitive",
          "default": "KEEP",
          "type": "string",
          "enum": [
            "KEEP",
            "DELETE"
          ]
        },
        "rh": {
          "description": "Number of days after which the catalog entries of \"unterminated\" receive requests (C, D, H, or K state) are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "rt": {
          "description": "Number of days after which the catalog entries of terminated receive transfers (RT state) are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "ry": {
          "description": "Number of days after which the catalog entries of received post-processing transfers are automatically purged",
          "type": "integer",
          "minimum": 0,
          "maximum": 99,
          "default": 10
        },
        "rx": {
          "description": "Number of days after which the catalog entries of receive transfers for which the end of reception procedure is correctly executed (RX state) are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "sh": {
          "description": "Number of days after which the catalog entries for \"unterminated\" send requests (D, C, H or K state) are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "st": {
          "description": "Number of days after which the catalog entries of terminated send transfers (ST state) are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "sy": {
          "description": "Number of days after which the catalog entries of sent post-processing transfers are automatically purged",
          "type": "integer",
          "minimum": 0,
          "maximum": 99,
          "default": 10
        },
        "sx": {
          "description": "Number of days after which the catalog entries of terminated send transfers, for which the end-of-send transfer procedure was correctly executed (SX state), are automatically purged",
          "type": "integer",
          "minimum": 1,
          "maximum": 99,
          "default": 10
        },
        "timep": {
          "description": "Daily purge time (user defined)",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 23595999
        },
        "updat": {
          "description": "Number of synchronization points between two consecutive updates of the catalog file during a transfer",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 256
        },
        "wscan": {
          "description": "Frequency, in minutes, with which Transfer CFT scans the catalog file when restarting a transfer",
          "type": "integer",
          "minimum": 1,
          "maximum": 60,
          "default": 5
        },
        "tlvcexec": {
          "description": "Batch to execute when the alert ends The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "tlvclear": {
          "description": "Level below which the alert ceases",
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "default": 0
        },
        "tlvwarn": {
          "description": "Catalog usage limit before issuing an alert. Once this limit is reached, the CFTCAT/TLVWEXEC is executed",
          "type": "integer",
          "minimum": 0,
          "maximum": 100,
          "default": 80
        },
        "tlvwexec": {
          "description": "Batch to execute when CFTCAT/TLVWARN is reached The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "tlvwrate": {
          "description": "The minimum amount of time, in seconds, to wait before resending an alert",
          "type": "integer",
          "minimum": 0,
          "maximum": 65535,
          "default": 60
        },
        "ntf": {
          "description": "Notification of events to the XNTF agent Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "ntfstate": {
          "description": "Character string describing the Transfer CFT states that are notified Case Insensitive",
          "default": "CDHKTX",
          "type": "string",
          "maxLength": 7
        }
      }
    },
    "CftObjectsCftsshListServer": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsshGetServerInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server"
        },
        "data": [
          {
            "type": "cftsshserver",
            "id": "SSH_DEFAULT",
            "attributes": {
              "srvprivkey": "PrivRSAKey",
              "clipubkey": "CliPubKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Server requires client key authentication",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server/SSH_DEFAULT"
            }
          }
        ]
      }
    },
    "CftObjectsCftsshGetServer": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsshGetServerInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/server/SSH_DEFAULT"
        },
        "data": [
          {
            "type": "cftsshserver",
            "id": "SSH_DEFAULT",
            "attributes": {
              "srvprivkey": "PrivRSAKey",
              "clipubkey": "CliPubKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Server requires client key authentication",
              "origin": "DESIGNER"
            }
          }
        ]
      }
    },
    "CftObjectsCftsshGetServerInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsshserver"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsshAttributesServer"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftsshAttributesServer": {
      "type": "object",
      "properties": {
        "srvprivkey": {
          "description": "Server private key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 513
        },
        "clipubkey": {
          "description": "Client public key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 513
        },
        "ciphlist": {
          "description": "List of algorithms supported Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "keyexchg": {
          "description": "Key exchange method to be used Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "hmac": {
          "description": "List of accepted HMAC Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        }
      }
    },
    "CftObjectsCftsshListClient": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsshGetClientInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client"
        },
        "data": [
          {
            "type": "cftsshclient",
            "id": "SSH_DEFAULT",
            "attributes": {
              "cliprivkey": "CliPrivKey",
              "srvpubkey": "PubRSAKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Client using key authentication",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client/SSH_DEFAULT"
            }
          }
        ]
      }
    },
    "CftObjectsCftsshGetClient": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsshGetClientInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssh/client/SSH_DEFAULT"
        },
        "data": [
          {
            "type": "cftsshclient",
            "id": "SSH_DEFAULT",
            "attributes": {
              "cliprivkey": "CliPrivKey",
              "srvpubkey": "PubRSAKey",
              "ciphlist": [
                "AES256-CTR",
                "AES192-CTR"
              ],
              "keyexchg": [
                "CURVE25519-SHA256@LIBSSH.ORG",
                "ECDH-SHA2-NISTP256"
              ],
              "hmac": [
                "HMAC-SHA2-512",
                "HMAC-SHA2-256"
              ],
              "comment": "Client using key authentication",
              "origin": "DESIGNER"
            }
          }
        ]
      }
    },
    "CftObjectsCftsshGetClientInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsshclient"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsshAttributesClient"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftsshAttributesClient": {
      "type": "object",
      "properties": {
        "cliprivkey": {
          "description": "Client private key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 513
        },
        "srvpubkey": {
          "description": "Server public key filename or ID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 513
        },
        "ciphlist": {
          "description": "List of supported algorithms Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "keyexchg": {
          "description": "Key exchange method to use Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "hmac": {
          "description": "List of accepted HMAC Case Insensitive",
          "type": "array",
          "maxItems": 12,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        }
      }
    },
    "CftObjectsCftsslListServer": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsslGetServerInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server"
        },
        "data": [
          {
            "type": "cftsslserver",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server/SSL_DEFAULT"
            }
          }
        ]
      }
    },
    "CftObjectsCftsslGetServer": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsslGetServerInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/server/SSL_DEFAULT"
        },
        "data": [
          {
            "type": "cftsslserver",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            }
          }
        ]
      }
    },
    "CftObjectsCftsslGetServerInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsslserver"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsslAttributesServer"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftsslAttributesServer": {
      "type": "object",
      "required": [
        "ciphlist"
      ],
      "properties": {
        "cache": {
          "description": "Activates SSL cache Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "cerfname": {
          "description": "File name root where the remote user chain of certificates is recorded The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 64
        },
        "ciphlist": {
          "description": "List of supported algorithms",
          "type": "integer",
          "minimum": 0,
          "maximum": 12
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "depth": {
          "description": "Maximum number of intermediate authorities authorized for the remote certificate",
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
          "default": 10
        },
        "dnuser": {
          "description": "String that the remote certificate DN must contain Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "dnissuer": {
          "description": "String that the remote certificate DN must contain Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "parm": {
          "description": "User parameter for SSL",
          "type": "string",
          "maxLength": 64
        },
        "rootcid": {
          "description": "List of certificate authorities that references identifiers in the local certificate database",
          "type": "array",
          "maxItems": 10,
          "items": {
            "type": "string",
            "maxLength": 256
          }
        },
        "trace": {
          "description": "SSL trace level",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "usercid": {
          "description": "Local user certificate",
          "type": "string",
          "maxLength": 256
        },
        "verify": {
          "description": "Authentication level Case Insensitive",
          "default": "REQUIRED",
          "type": "string",
          "enum": [
            "REQUIRED",
            "OPTIONAL",
            "NONE"
          ]
        },
        "version": {
          "description": "Session version Case Insensitive",
          "default": "TLSV1",
          "type": "string",
          "enum": [
            "SSLV3",
            "TLSV1",
            "SSLV3COMP",
            "TLSV1COMP"
          ]
        },
        "keyext": {
          "description": "Indicates if the key extensions for the remote certificate must be checked  Case Insensitive",
          "default": "NONE",
          "type": "string",
          "enum": [
            "VERIFY",
            "NONE"
          ]
        },
        "passw": {
          "description": "Password to use with PassPort PS server",
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "CftObjectsCftsslListClient": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsslGetClientInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client"
        },
        "data": [
          {
            "type": "cftsslclient",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client/SSL_DEFAULT"
            }
          }
        ]
      }
    },
    "CftObjectsCftsslGetClient": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsslGetClientInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftssl/client/SSL_DEFAULT"
        },
        "data": [
          {
            "type": "cftsslclient",
            "id": "SSL_DEFAULT",
            "attributes": {
              "version": "TLSV1COMP",
              "keyext": "NONE",
              "ciphlist": [
                49200,
                49199
              ],
              "usercid": "localuser",
              "rootcid": [
                "localroot",
                "remoteca"
              ],
              "verify": "REQUIRED",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            }
          }
        ]
      }
    },
    "CftObjectsCftsslGetClientInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsslclient"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsslAttributesClient"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftsslAttributesClient": {
      "type": "object",
      "required": [
        "ciphlist"
      ],
      "properties": {
        "cache": {
          "description": "Activates SSL cache Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "cerfname": {
          "description": "File name root where the remote user chain of certificates is recorded The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 64
        },
        "ciphlist": {
          "description": "List of supported algorithms",
          "type": "integer",
          "minimum": 0,
          "maximum": 12
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "depth": {
          "description": "Maximum number of intermediate authorities authorized for the remote certificate",
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
          "default": 10
        },
        "dnuser": {
          "description": "String that the remote certificate DN must contain Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "dnissuer": {
          "description": "String that the remote certificate DN must contain Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "parm": {
          "description": "User parameter for SSL",
          "type": "string",
          "maxLength": 64
        },
        "rootcid": {
          "description": "List of certificate authorities that references identifiers in the local certificate database",
          "type": "array",
          "maxItems": 10,
          "items": {
            "type": "string",
            "maxLength": 256
          }
        },
        "trace": {
          "description": "SSL trace level",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "usercid": {
          "description": "Local user certificate",
          "type": "string",
          "maxLength": 256
        },
        "verify": {
          "description": "Authentication level Case Insensitive",
          "default": "NONE",
          "type": "string",
          "enum": [
            "ENFORCED",
            "REQUIRED",
            "OPTIONAL",
            "NONE"
          ]
        },
        "version": {
          "description": "Session version Case Insensitive",
          "default": "TLSV1",
          "type": "string",
          "enum": [
            "SSLV3",
            "TLSV1",
            "SSLV3COMP",
            "TLSV1COMP"
          ]
        },
        "keyext": {
          "description": "Indicates if the key extensions for the remote certificate must be checked  Case Insensitive",
          "default": "NONE",
          "type": "string",
          "enum": [
            "VERIFY",
            "NONE"
          ]
        },
        "passw": {
          "description": "Password to use with PassPort PS server",
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "CftObjectsCftprivList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftprivGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv"
        },
        "data": [
          {
            "type": "cftpriv",
            "id": "make_transfer",
            "attributes": {
              "resource": "transfer",
              "actions": [
                "create",
                "delete",
                "view",
                "edit",
                "cancel",
                "resume",
                "pause",
                "execute",
                "submit",
                "end"
              ],
              "comment": "Manages transfer",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/make_transfer"
            }
          },
          {
            "type": "cftpriv",
            "id": "PRIV-CONN-INTERFACE",
            "attributes": {
              "resource": "SERVICE:UI",
              "actions": [
                "CONNECT"
              ],
              "condition": "GROUP==\"PRODUCTION\" && ID~=\"CFT-PROD-ITEM*\"",
              "comment": "PRIV LIMITs the connection for a given Transfer CFT name",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/PRIV-CONN-INTERFACE"
            }
          }
        ]
      }
    },
    "CftObjectsCftprivGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftprivGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpriv/make_transfer"
        },
        "data": {
          "type": "cftpriv",
          "id": "make_transfer",
          "attributes": {
            "resource": "transfer",
            "actions": [
              "create",
              "delete",
              "view",
              "edit",
              "cancel",
              "resume",
              "pause",
              "execute",
              "submit",
              "end"
            ],
            "comment": "Manages transfer",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftprivGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftpriv"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftprivAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftprivAttributes": {
      "type": "object",
      "required": [
        "resource",
        "actions"
      ],
      "properties": {
        "comment": {
          "description": "Free comment",
          "type": "string",
          "maxLength": 80
        },
        "resource": {
          "description": "Resource on which this privilege is applied Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "actions": {
          "description": "List of authorized actions for this privilege",
          "type": "array",
          "maxItems": 16,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "condition": {
          "description": "Condition for this privilege Case Insensitive",
          "type": "string",
          "maxLength": 256
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftroleList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftroleGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole"
        },
        "data": [
          {
            "type": "cftrole",
            "id": "view_flow",
            "attributes": {
              "privs": [
                "SERVICE:UI_CONNECT",
                "CONFIGURATION:CFTSEND_VIEW",
                "CONFIGURATION:CFTRECV_VIEW",
                "CONFIGURATION:CFTDEST_VIEW"
              ],
              "comment": "Allow only access to flow in read only mode",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/view_flow"
            }
          },
          {
            "type": "cftrole",
            "id": "make_transfer",
            "attributes": {
              "privs": [
                "SERVICE:UI_CONNECT",
                "make_transfer",
                "FILTER:CATALOG_ALL",
                "FILTER:LOG_ALL",
                "CONFIGURATION:CFTPART_VIEW",
                "CONFIGURATION:CFTSEND_VIEW",
                "CONFIGURATION:CFTRECV_VIEW",
                "CONFIGURATION:CFTDEST_VIEW"
              ],
              "comment": "Create and manage transfers",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/make_transfer"
            }
          }
        ]
      }
    },
    "CftObjectsCftroleGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftroleGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrole/view_flow"
        },
        "data": {
          "type": "cftrole",
          "id": "view_flow",
          "attributes": {
            "privs": [
              "SERVICE:UI_CONNECT",
              "CONFIGURATION:CFTSEND_VIEW",
              "CONFIGURATION:CFTRECV_VIEW",
              "CONFIGURATION:CFTDEST_VIEW"
            ],
            "comment": "Only allow access to flow in read mode",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftroleGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftrole"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftroleAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftroleAttributes": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Free comment",
          "type": "string",
          "maxLength": 80
        },
        "aliases": {
          "description": "List of aliases associated to this role",
          "type": "array",
          "maxItems": 32,
          "items": {
            "type": "string",
            "maxLength": 64
          }
        },
        "privs": {
          "description": "List of privileges associated to this role",
          "type": "array",
          "maxItems": 128,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftfolderList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftfolderGetInfo"
          }
        }
      }
    },
    "CftObjectsCftfolderGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftfolderGetInfo"
        }
      }
    },
    "CftObjectsCftfolderGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftfolder"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftfolderAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftfolderAttributes": {
      "type": "object",
      "required": [
        "idf",
        "part",
        "scandir",
        "workdir"
      ],
      "properties": {
        "state": {
          "description": "Activation status Case Insensitive",
          "default": "NOACTIVE",
          "type": "string",
          "enum": [
            "ACTIVE",
            "NOACTIVE"
          ]
        },
        "method": {
          "description": "Indicates if the files are moved from the scan folder to the work folder or left Case Insensitive",
          "default": "MOVE",
          "type": "string",
          "enum": [
            "MOVE",
            "FILE"
          ]
        },
        "resubmitchanges": {
          "description": "Indicates if the changed files must be resubmitted Case Insensitive",
          "default": "YES",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "enablesubdir": {
          "description": "Indicates if the subfolders are also monitored Case Insensitive",
          "default": "YES",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "fileidledelay": {
          "description": "If the state of a file has not changed within this delay in seconds, the file becomes a candidate for submission",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "default": 5
        },
        "idf": {
          "description": "File type identifier Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "part": {
          "description": "Partner identifier Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "scandir": {
          "description": "Absolute path name of the top level directory to scan",
          "type": "string",
          "maxLength": 512
        },
        "workdir": {
          "description": "Absolute path name of the top level directory available for file state information",
          "type": "string",
          "maxLength": 512
        },
        "interval": {
          "description": "Interval in seconds between two scans of the directory files",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "default": 60
        },
        "filecount": {
          "description": "Maximum number of file submissions for each scan",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000000000,
          "default": 0
        },
        "filesizemin": {
          "description": "Files shorter than this value, in bytes, are not candidates for submission",
          "type": "integer",
          "minimum": 0,
          "maximum": 100000000000000,
          "default": 0
        },
        "filesizemax": {
          "description": "Files larger than this value, in bytes, are not candidates for submission",
          "type": "integer",
          "minimum": 0,
          "maximum": 100000000000000,
          "default": 0
        },
        "filtertype": {
          "description": "The <strong>WILDMAT<\\strong> action is only valid on Windows, Unix, and IBM i platforms. The WILDMAT is the default only on Windows and Unix, otherwise it is STRJCMP.",
          "type": "string",
          "enum": [
            "WILDMAT",
            "STRJCMP",
            "EREGEX"
          ]
        },
        "includefilter": {
          "description": "Only files whose names match this pattern are monitored",
          "type": "string",
          "maxLength": 256
        },
        "excludefilter": {
          "description": "Files whose names match this pattern are not monitored",
          "type": "string",
          "maxLength": 256
        },
        "renamemethod": {
          "description": "Adds nothing, or a timestamp of the pattern YYYYMMDDHHMMSS, at the end of the name of the renamed file Case Insensitive",
          "default": "TIMESTAMP",
          "type": "string",
          "enum": [
            "NONE",
            "TIMESTAMP"
          ]
        },
        "renameseparator": {
          "description": "The first character defines the separator before the timestamp. The second character, when present, defines the separator after the timestamp",
          "default": ".",
          "type": "string",
          "maxLength": 16
        },
        "usefsevents": {
          "description": "Indicates if you use file-system events to trigger folder scans Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftcronList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftcronGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron"
        },
        "data": [
          {
            "type": "cftcron",
            "id": "exec_every_5min",
            "attributes": {
              "crontab": "CRONTAB1,",
              "exec": "<CRONCMD>",
              "time": "m=*/5",
              "state": "noactive",
              "comment": "Execution script <CRONCMD> every 5 minutes",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron"
            }
          }
        ]
      }
    },
    "CftObjectsCftcronGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftcronGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftcron/exec_every_5min"
        },
        "data": {
          "type": "cftcron",
          "id": "exec_every_5min",
          "attributes": {
            "crontab": "CRONTAB1,",
            "exec": "<CRONCMD>",
            "time": "m=*/5",
            "state": "noactive",
            "comment": "Execution script <CRONCMD> every 5 minutes",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftcronGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftcron"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftcronAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftcronAttributes": {
      "type": "object",
      "required": [
        "crontab",
        "exec",
        "time"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "crontab": {
          "description": "Identifier that associates a CRONTAB with the CFTPARM object Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "exec": {
          "description": "Physical job name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "parm": {
          "description": "The PARM to be used in the job execution",
          "type": "string",
          "maxLength": 512
        },
        "state": {
          "description": "Activation Case Insensitive",
          "default": "ACTIVE",
          "type": "string",
          "enum": [
            "ACTIVE",
            "NOACTIVE"
          ]
        },
        "time": {
          "description": "Activation time for the CRONJOB",
          "type": "string",
          "maxLength": 512
        },
        "type": {
          "description": "Script type Case Insensitive",
          "default": "EXEC",
          "type": "string",
          "enum": [
            "EXEC",
            "CFTUTIL"
          ]
        },
        "userid": {
          "description": "The user for this job procedure",
          "type": "string",
          "maxLength": 32
        },
        "execpolicy": {
          "description": "Node policy for executing a job when working with multiple nodes Case Insensitive",
          "default": "INSTANCE",
          "type": "string",
          "enum": [
            "INSTANCE",
            "ALLNODES"
          ]
        }
      }
    },
    "CftObjectsCftapplListRecv": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftapplGetRecvInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv"
        },
        "data": [
          {
            "type": "cftapplrecv",
            "id": "purchase",
            "attributes": {
              "userid": "ORDERRECV",
              "comment": "Owner set to receive files related to purchase orders",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv/purchase"
            }
          }
        ]
      }
    },
    "CftObjectsCftapplGetRecv": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftapplGetRecvInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplrecv/purchase"
        },
        "data": {
          "type": "cftapplrecv",
          "id": "purchase",
          "attributes": {
            "userid": "ORDERRECV",
            "comment": "Owner set to receive files related to purchase orders",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftapplGetRecvInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftapplrecv"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftapplAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftapplListSend": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftapplGetSendInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend"
        },
        "data": [
          {
            "type": "cftapplsend",
            "id": "purchase",
            "attributes": {
              "userid": "ORDERSEND",
              "comment": "Owner set to send files related to purchase orders",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend/purchase"
            }
          }
        ]
      }
    },
    "CftObjectsCftapplGetSend": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftapplGetSendInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplsend/purchase"
        },
        "data": {
          "type": "cftapplsend",
          "id": "purchase",
          "attributes": {
            "userid": "ORDERSEND",
            "comment": "Owner set to send files related to purchase orders",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftapplGetSendInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftapplsend"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftapplAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftapplListBoth": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftapplGetBothInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth"
        },
        "data": [
          {
            "type": "cftapplboth",
            "id": "purchase",
            "attributes": {
              "userid": "ORDER",
              "comment": "Owner set to send/received files related to purchase orders",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth/purchase"
            }
          }
        ]
      }
    },
    "CftObjectsCftapplGetBoth": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftapplGetBothInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftapplboth/purchase"
        },
        "data": {
          "type": "cftapplboth",
          "id": "purchase",
          "attributes": {
            "userid": "ORDER",
            "comment": "Owner set to send/received files related to purchase orders",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftapplGetBothInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftapplboth"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftapplAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftapplAttributes": {
      "type": "object",
      "required": [
        "userid"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "groupid": {
          "description": "Information for completing the USERID The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "userid": {
          "description": "Transfer owner's identifier The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "CftObjectsCftauthList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftauthGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth"
        },
        "data": [
          {
            "type": "cftauth",
            "id": "sndfactory",
            "attributes": {
              "idf": [
                "bin",
                "txt"
              ],
              "comment": "List of send IDF defined for partner FACTORY (CFTPART SAUTH)",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/sndfactory"
            }
          },
          {
            "type": "cftauth",
            "id": "recvfactory",
            "attributes": {
              "idf": [
                "txt"
              ],
              "comment": "List of receive IDF defined for partner FACTORY",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/recvfactory"
            }
          }
        ]
      }
    },
    "CftObjectsCftauthGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftauthGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftauth/sndfactory"
        },
        "data": {
          "type": "cftauth",
          "id": "sndfactory",
          "attributes": {
            "idf": [
              "bin",
              "txt"
            ],
            "comment": "List of send IDF defined for the partner FACTORY",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftauthGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftauth"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftauthAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftauthAttributes": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "fname": {
          "description": "Name of the file where authorized or unauthorized users are defined The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "idf": {
          "description": "List of file identifiers Case Insensitive",
          "type": "array",
          "maxItems": 200,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftdestList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftdestGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest"
        },
        "data": [
          {
            "type": "cftdest",
            "id": "city",
            "attributes": {
              "part": [
                "PARIS",
                "NEWYORK"
              ],
              "comment": "City definition sample",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/city"
            }
          },
          {
            "type": "cftdest",
            "id": "offices",
            "attributes": {
              "part": [
                "LYON",
                "PARIS",
                "ANNECY"
              ],
              "comment": "Offices definition sample",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/offices"
            }
          }
        ]
      }
    },
    "CftObjectsCftdestGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftdestGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftdest/city"
        },
        "data": {
          "type": "cftdest",
          "id": "city",
          "attributes": {
            "part": [
              "PARIS",
              "NEWYORK"
            ],
            "comment": "City definition sample",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftdestGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftdest"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftdestAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftdestAttributes": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "exec": {
          "description": "Name of the file that describes the end-of-transfer procedure Case Insensitive",
          "default": "DEST",
          "type": "string",
          "enum": [
            "DEST",
            "PART",
            "CHILDREN"
          ]
        },
        "execpre": {
          "description": "Preprocessing procedure submit mode type Case Insensitive",
          "default": "DEST",
          "type": "string",
          "enum": [
            "DEST",
            "PART",
            "CHILDREN"
          ]
        },
        "execa": {
          "description": "Acknowledgment procedure submit mode type Case Insensitive",
          "default": "DEST",
          "type": "string",
          "enum": [
            "DEST",
            "PART",
            "CHILDREN"
          ]
        },
        "fname": {
          "description": "The file in which the list of the identifiers of the various partners, each corresponding to one value of the ID parameter of a CFTPART command, is defined The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "for": {
          "description": "Controls the use of the partner list Case Insensitive",
          "default": "BOTH",
          "type": "string",
          "enum": [
            "BOTH",
            "LOCAL",
            "COMMUT"
          ]
        },
        "nopart": {
          "description": "Action to perform when one of the partners is not defined Case Insensitive",
          "default": "ABORT",
          "type": "string",
          "enum": [
            "ABORT",
            "CONTINUE",
            "IGNORE"
          ]
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "part": {
          "description": "Explicit list of the various partners' identifiers Case Insensitive",
          "type": "array",
          "maxItems": 200,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        }
      }
    },
    "CftObjectsCftidfListRecv": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftidfGetRecvInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf"
        },
        "data": [
          {
            "type": "cftidfrecv",
            "id": "PARIS",
            "attributes": {
              "nidf": "ALIAS_PARIS",
              "comment": "hen destination is PARIS overide the Identifier",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/paris"
            }
          },
          {
            "type": "cftidfrecv",
            "id": "NEWYORK",
            "attributes": {
              "nidf": "ALIAS_NEWYORK",
              "comment": "hen destination is NEWYORK overide the Identifier",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/NEWYORK"
            }
          }
        ]
      }
    },
    "CftObjectsCftidfGetRecv": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftidfGetRecvInfo"
        }
      },
      "example": {
        "type": "cftidfrecv",
        "id": "paris",
        "attributes": {
          "nidf": "ALIAS_PARIS",
          "comment": "When destination is PARIS overide the Identifier",
          "origin": "DESIGNER"
        },
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available/idf/paris"
        }
      }
    },
    "CftObjectsCftidfGetRecvInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftidfrecv"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftidfAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftrecvList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftrecvGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv"
        },
        "data": [
          {
            "type": "cftrecv",
            "id": "make_available",
            "attributes": {
              "frecfm": "F",
              "comment": "Create a fixed record format file; padding occurs",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
            }
          },
          {
            "type": "cftrecv",
            "id": "make_available_var",
            "attributes": {
              "frecfm": "V",
              "comment": "Create a variable record format file; NO Padding occurs",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
            }
          }
        ]
      }
    },
    "CftObjectsCftrecvGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftrecvGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftrecv/make_available"
        },
        "data": {
          "type": "cftrecv",
          "id": "make_available",
          "attributes": {
            "frecfm": "F",
            "comment": "Create a fixed-record-format file; padding occurs",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftrecvGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftrecv"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftrecvAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftrecvAttributes": {
      "type": "object",
      "properties": {
        "cycdate": {
          "description": "Upper final date for activating the first transfer of a cycle",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 0
        },
        "cyctime": {
          "description": "Cyclic transfer time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "maxdate": {
          "description": "Final date for transfer validity",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 99991231
        },
        "maxtime": {
          "description": "Transfer validity time limit on the final date Format must be HH:MM:SS",
          "type": "string"
        },
        "mindate": {
          "description": "Minimum transfer validity date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "mintime": {
          "description": "Initial validity time for the transfer on the first day Format must be HH:MM:SS",
          "type": "string"
        },
        "maxduration": {
          "description": "The file transfer timeout",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "attsuser": {
          "description": "Additional information specifically related to the <strong>fname</strong> parameter. Valid only if the Transfer CFT is on a z/OS system or a HP NonStop system using Native files.",
          "type": "string",
          "maxLength": 512
        },
        "ackmindate": {
          "description": "Acknowledgment exec file can be launched from this date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "ackmintime": {
          "description": "Acknowledgment exec file can be launched from this time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "postmindate": {
          "description": "Post-processing exec file can be launched from this date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "postmintime": {
          "description": "Post-processing exec file can be launched from this time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "ackexec": {
          "description": "File describing the procedure to be executed when receiving an acknowledgment reply for the transfer The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "ackstate": {
          "description": "Wait for ACK/NACK to enter the X phase Case Insensitive",
          "default": "IGNORE",
          "type": "string",
          "enum": [
            "REQUIRE",
            "IGNORE"
          ]
        },
        "acktimeout": {
          "description": "Timeout before switching phase step to K if no END is received",
          "type": "integer",
          "minimum": 0,
          "maximum": 3600,
          "default": 0
        },
        "comment": {
          "description": "Free comment",
          "type": "string",
          "maxLength": 160
        },
        "cos": {
          "description": "Class Of Service for bandwidth control",
          "type": "string",
          "maxLength": 32
        },
        "delete": {
          "description": "Automatic deletion of the catalog entries in the \"T\" state (terminated) for the corresponding IDF Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "duplicat": {
          "description": "Automatic detection of the duplicate transfers Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "dirnb": {
          "description": "Number of directory blocks used to create a directory",
          "type": "integer",
          "minimum": 0,
          "maximum": 4294967295,
          "default": 0
        },
        "exec": {
          "description": "Name of the file that describes the end-of-transfer procedure The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execrall": {
          "description": "Submission policy of the post-processing procedure to launch, when receiving in mode FILE=ALL Case Insensitive",
          "default": "ALL",
          "type": "string",
          "enum": [
            "ALL",
            "PARENT",
            "CHILDREN"
          ]
        },
        "exece": {
          "description": "Name of the file to execute when an error leads to the K PHASESTEP The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "exit": {
          "description": "Identifier of the CFTEXIT command associated with this transfer Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "facc": {
          "description": "File access method. Case insensitive. The values <strong>VSH0<\\strong> are only valid if the Transfer CFT is on a <strong>z/OS<\\strong> platform.",
          "default": "",
          "type": "string",
          "enum": [
            " ",
            "V",
            "S",
            "H",
            0
          ]
        },
        "faction": {
          "description": "Action on the file prior to a receive transfer. The <strong>RENAME<\\strong> action is only valid on Unix platforms, and on HP NonStop if used in an OSS environment.",
          "default": " ",
          "type": "string",
          "enum": [
            "RENAME",
            "ERASE",
            "DELETE",
            "VERIFY",
            "CONCAT",
            "RETRYRENAME",
            " "
          ]
        },
        "fblksize": {
          "description": "Block size, in bytes, of the file to be created",
          "type": "integer",
          "minimum": 0,
          "maximum": 62536,
          "default": 0
        },
        "fcheck": {
          "description": "Reject incoming transfer if local file attributes don't match the virtual file attributes' Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "fcharset": {
          "description": "Local file encoding",
          "type": "string",
          "maxLength": 32
        },
        "fcode": {
          "description": "Local file data code Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY",
            " "
          ]
        },
        "fcomp": {
          "description": "Compression of the data in the receiver logical file",
          "type": "integer",
          "minimum": 0,
          "maximum": 16,
          "default": 16
        },
        "fdb": {
          "description": "Name of the VFM base containing the logical file Case Insensitive",
          "type": "string",
          "maxLength": 64
        },
        "fdelete": {
          "description": "Enable file deletion based on the transfer state Case Insensitive",
          "type": "string",
          "maxLength": 6
        },
        "fdisp": {
          "description": "File sharing option Case Insensitive",
          "default": "BOTH",
          "type": "string",
          "enum": [
            "OLD",
            "NEW",
            "BOTH"
          ]
        },
        "filenotfound": {
          "description": "Manages the desired behavior if a file is not found when performing a transfer Case Insensitive",
          "default": "ABORT",
          "type": "string",
          "enum": [
            "ABORT",
            "IGNORE"
          ]
        },
        "fkeylen": {
          "description": "Key length (in bytes) of an indexed file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "fkeypos": {
          "description": "Key position (in bytes), realtive to 0, in the records of an indexed file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "flowname": {
          "description": "The local flow descriptor Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "flrecl": {
          "description": "Length of the record",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "fname": {
          "description": "Name of the physical receiver file, filename or complete path name, of the directory Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "force": {
          "description": "Priority with which the parameters set in CFTRECV are taken into account relative to the parameters set in an associated RECV command Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "forg": {
          "description": "Organization of the file to be transferred. The partitioned organization (PART) is only supported on z/OS systems.",
          "default": " ",
          "type": "string",
          "enum": [
            " ",
            "SEQ",
            "INDEXED",
            "DIRECT",
            "PART"
          ]
        },
        "fpad": {
          "description": "Padding character at the file level",
          "type": "string",
          "maxLength": 16
        },
        "frecfm": {
          "description": "Record format of the receiver file Case Insensitive",
          "default": "",
          "type": "string",
          "enum": [
            "F",
            "U",
            "V",
            ""
          ]
        },
        "fspace": {
          "description": "Size of the local file, in Kbytes",
          "type": "integer",
          "minimum": 0,
          "maximum": 9999999999,
          "default": 0
        },
        "ftype": {
          "description": "File type, which is platform dependent. Windows : \"BVTOXFJ\"  OS400   : \" DESZJ\" UNIX    : \" BVTOXJ\" TANDEM  : \" BVTOXJEN\" z/OS    : \" ABMST_1J\"  Case insensitive.",
          "default": "",
          "type": "string",
          "enum": [
            "B",
            "V",
            "T",
            "O",
            "X",
            "F",
            "J",
            " ",
            "A",
            "M",
            "S",
            "_",
            "1"
          ]
        },
        "groupid": {
          "description": "Information completing the USERID of the CFTRECV command The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        },
        "maction": {
          "description": "Action on the files transferred by COPY at the time of creation Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "REPLACE",
            " "
          ]
        },
        "ncharset": {
          "description": "Destination file encoding",
          "type": "string",
          "maxLength": 32
        },
        "ncode": {
          "description": "Network file data code Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY",
            " "
          ]
        },
        "ncomp": {
          "description": "Transmission compression level",
          "type": "integer",
          "minimum": 0,
          "maximum": 31,
          "default": 15
        },
        "netband": {
          "description": "Outgoing port range",
          "type": "integer",
          "minimum": 1,
          "maximum": 16,
          "default": 1
        },
        "notify": {
          "description": "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 8
        },
        "opermsg": {
          "description": "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "poststate": {
          "description": "The transfer phase step as it enters the Y phase Case Insensitive",
          "default": "DISP",
          "type": "string",
          "enum": [
            "DISP"
          ]
        },
        "posttimeout": {
          "description": "Timeout before changing the phase step to K if no END is received during post-processing",
          "type": "integer",
          "minimum": 0,
          "maximum": 3600,
          "default": 0
        },
        "pri": {
          "description": "Priority of scheduled transfers",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 128
        },
        "rappl": {
          "description": "Identifier of the file receiver application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 48
        },
        "rkerror": {
          "description": "Action to be taken if a transfer aborts during the selection phase in server mode Case Insensitive",
          "default": "",
          "type": "string",
          "enum": [
            "KEEP",
            "DELETE",
            ""
          ]
        },
        "rpasswd": {
          "description": "Password for the user who is receiving the file",
          "type": "string",
          "maxLength": 32
        },
        "ruser": {
          "description": "Identifier for the user who is receiving the file Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "sappl": {
          "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 48
        },
        "sourceappl": {
          "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "serial": {
          "description": "Parameter to enable file transfer serialization in flow definitions Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "Y",
            "X",
            " "
          ]
        },
        "spasswd": {
          "description": "Password for the user who is sending the file",
          "type": "string",
          "maxLength": 32
        },
        "suser": {
          "description": "Identifier for the user who is sending the file Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "state": {
          "description": "Transfer request state Case Insensitive",
          "default": "DISP",
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "storageaccount": {
          "description": "Storage account Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "targetappl": {
          "description": "Identifier of the local file receiver application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "trk": {
          "description": "Details provided to Sentinel about transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "userid": {
          "description": "Identifier of the transfer owner The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        },
        "wfname": {
          "description": "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "workingdir": {
          "description": "Working directory Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "xlate": {
          "description": "Identifier of the CFTXLATE object defining the translation table used for the transfers Case Insensitive",
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "CftObjectsCftsendListYes": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsendGetYesInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes"
        },
        "data": [
          {
            "type": "cftsendyes",
            "id": "make_available",
            "attributes": {
              "fcode": "BINARY",
              "frecfm": "F",
              "faction": "NONE",
              "STATE": "DISP",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
            }
          },
          {
            "type": "cftsendyes",
            "id": "make_available_var",
            "attributes": {
              "fcode": "BINARY",
              "frecfm": "V",
              "faction": "NONE",
              "STATE": "DISP",
              "comment": "Make a file available when using Transfer CFT in server mode",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available_var"
            }
          }
        ]
      }
    },
    "CftObjectsCftsendGetYes": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsendGetYesInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implyes/make_available"
        },
        "data": {
          "type": "cftsendyes",
          "id": "make_available",
          "attributes": {
            "fcode": "BINARY",
            "frecfm": "F",
            "faction": "NONE",
            "STATE": "DISP",
            "comment": "Make a file available when using Transfer CFT in server mode",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftsendGetYesInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsendyes"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsendAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftidfListSend": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftidfGetSendInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf"
        },
        "data": [
          {
            "type": "cftidfsend",
            "id": "PARIS",
            "attributes": {
              "nidf": "ALIAS_PARIS",
              "comment": "hen destination is PARIS overide the Identifier",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf/paris"
            }
          },
          {
            "type": "cftidfsend",
            "id": "NEWYORK",
            "attributes": {
              "nidf": "ALIAS_NEWYORK",
              "comment": "hen destination is NEWYORK overide the Identifier",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete/idf/NEWYORK"
            }
          }
        ]
      }
    },
    "CftObjectsCftidfGetSend": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftidfGetSendInfo"
        }
      },
      "example": {
        "type": "cftidfsend",
        "id": "paris",
        "attributes": {
          "nidf": "ALIAS_PARIS",
          "comment": "When destination is PARIS overide the Identifier",
          "origin": "DESIGNER"
        },
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/cftidfsend/idf/paris"
        }
      }
    },
    "CftObjectsCftidfGetSendInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftidfsend"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftidfAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftidfAttributes": {
      "type": "object",
      "required": [
        "nidf"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "nidf": {
          "description": "File network identifier Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        }
      }
    },
    "CftObjectsCftsendListNo": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftsendGetNoInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno"
        },
        "data": [
          {
            "type": "cftsendno",
            "id": "sendanddelete",
            "attributes": {
              "delete": "yes",
              "comment": "Send the file and delete the catalog record after completion",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
            }
          },
          {
            "type": "cftsendno",
            "id": "sendandkeep",
            "attributes": {
              "delete": "no",
              "comment": "Send the file and keep the catalog record after completion",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendandkeep"
            }
          }
        ]
      }
    },
    "CftObjectsCftsendGetNo": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftsendGetNoInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftsend/implno/sendanddelete"
        },
        "data": {
          "type": "cftsendno",
          "id": "sendanddelete",
          "attributes": {
            "delete": "yes",
            "comment": "Send the file and delete the catalog record after completion",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftsendGetNoInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftsendno"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftsendAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftsendAttributes": {
      "type": "object",
      "properties": {
        "cycdate": {
          "description": "Upper final date for activating the first transfer of a cycle",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 0
        },
        "cyctime": {
          "description": "Cyclic transfer time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "maxdate": {
          "description": "Final date for transfer validity",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 99991231
        },
        "maxtime": {
          "description": "Transfer validity time limit on the final date Format must be HH:MM:SS",
          "type": "string"
        },
        "mindate": {
          "description": "Minimum transfer validity date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "mintime": {
          "description": "Initial validity time for the transfer on the first day Format must be HH:MM:SS",
          "type": "string"
        },
        "maxduration": {
          "description": "The file transfer timeout",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "ackmindate": {
          "description": "Acknowledgment exec file can be launched from this date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "ackmintime": {
          "description": "Acknowledgment exec file can be launched from this time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "postmindate": {
          "description": "Post-processing exec file can be launched from this date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "postmintime": {
          "description": "Post-processing exec file can be launched from this time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "preexec": {
          "description": "The preprocessing exec file The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "prestate": {
          "description": "The transfer phase step as it enters the A phase Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            " ",
            "DISP",
            "HOLD"
          ]
        },
        "pretimeout": {
          "description": "Timeout before switching phase step to K if no END is received during preprocessing",
          "type": "integer",
          "minimum": 0,
          "maximum": 3600,
          "default": 0
        },
        "premindate": {
          "description": "Execute the preprocessing file as of this date",
          "type": "integer",
          "minimum": 0,
          "maximum": 99991231,
          "default": 10000101
        },
        "premintime": {
          "description": "Execute the preprocessing file as of this time",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "ackexec": {
          "description": "Name of the file describing the procedure to be executed when receiving an acknowledgment reply for the transfer The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "ackstate": {
          "description": "Wait for ACK/NACK to enter the X phase Case Insensitive",
          "default": "IGNORE",
          "type": "string",
          "enum": [
            "REQUIRE",
            "IGNORE"
          ]
        },
        "acktimeout": {
          "description": "Timeout before switching phase step to K if no END is received",
          "type": "integer",
          "minimum": 0,
          "maximum": 3600,
          "default": 0
        },
        "comment": {
          "description": "Free comment",
          "type": "string",
          "maxLength": 160
        },
        "cos": {
          "description": "Class Of Service for bandwidth control",
          "type": "string",
          "maxLength": 32
        },
        "cycle": {
          "description": "Number of units defining the transfer cycle period",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "delete": {
          "description": "Automatic deletion of catalog entries in the \"T\" state (terminated) for the corresponding IDF Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "duplicat": {
          "description": "Automatic detection of duplicate transfers Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "exec": {
          "description": "File that describes the end-of-transfer procedure The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "exece": {
          "description": "File to execute when an error leads to the K PHASESTEP The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "execsub": {
          "description": "Submission policy of the end-of-transfer procedure to launch when sending a group of files Case Insensitive",
          "default": "LIST",
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "execsuba": {
          "description": "Submission policy of the procedure to launch receiving acknowledgment when sending a group of files Case Insensitive",
          "default": "SUBF",
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "execsubpre": {
          "description": "Submission policy of the preprocessing procedure when sending a group of files Case Insensitive",
          "default": "LIST",
          "type": "string",
          "enum": [
            "LIST",
            "FILE",
            "SUBF"
          ]
        },
        "exit": {
          "description": "Identifier of the CFTEXIT command associated with this transfer Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "facc": {
          "description": "File access method. Case insensitive. The values <strong>VSH0<\\strong> are only valid if the Transfer CFT is on a <strong>z/OS<\\strong> platform.",
          "default": "",
          "type": "string",
          "enum": [
            " ",
            "V",
            "S",
            "H",
            0
          ]
        },
        "faction": {
          "description": "Action on the file after a send transfer Case Insensitive",
          "default": "NONE",
          "type": "string",
          "enum": [
            "ERASE",
            "DELETE",
            "NONE",
            "ROTATE"
          ]
        },
        "fblksize": {
          "description": "Block size, in bytes, of the file to be created",
          "type": "integer",
          "minimum": 0,
          "maximum": 65535,
          "default": 0
        },
        "fcharset": {
          "description": "Local file encoding",
          "type": "string",
          "maxLength": 32
        },
        "fcode": {
          "description": "Local file data code Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY",
            " "
          ]
        },
        "fdb": {
          "description": "Name of the VFM base containing the logical file Case Insensitive",
          "type": "string",
          "maxLength": 64
        },
        "fdelete": {
          "description": "Enable file deletion based on the transfer state Case Insensitive",
          "type": "string",
          "maxLength": 6
        },
        "fdisp": {
          "description": "File sharing option Case Insensitive",
          "default": "SHR",
          "type": "string",
          "enum": [
            "OLD",
            "SHR",
            "CHECK"
          ]
        },
        "filenotfound": {
          "description": "Manages the desired behavior if a file is not found when performing a transfer Case Insensitive",
          "default": "ABORT",
          "type": "string",
          "enum": [
            "ABORT",
            "IGNORE"
          ]
        },
        "filtertype": {
          "description": "Pattern matching algorithm to use for file name filtering Case Insensitive",
          "default": "STRJCMP",
          "type": "string",
          "enum": [
            "STRJCMP",
            "EREGEX"
          ]
        },
        "filter": {
          "description": "Filter REGEX pattern to use for file name filtering",
          "type": "string",
          "maxLength": 256
        },
        "fkeylen": {
          "description": "Key length, in bytes, of an indexed file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "fkeypos": {
          "description": "Key position, in bytes, relative to 0 in the records of an indexed file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "flowname": {
          "description": "Local flow descriptor Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "flrecl": {
          "description": "Length of the record",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "fname": {
          "description": "Local file, directory, indirection file, selection mask, or selection directory to be sent Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "force": {
          "description": "Priority with which the parameters set in CFTSEND are taken into account relative to the parameters set in an associated RECV command Case Insensitive",
          "default": "NO",
          "type": "string",
          "enum": [
            "YES",
            "NO"
          ]
        },
        "forg": {
          "description": "Organization of the file to be transferred. The partitioned organization (PART) is only supported on z/OS systems.",
          "default": " ",
          "type": "string",
          "enum": [
            " ",
            "SEQ",
            "INDEXED",
            "DIRECT",
            "PART"
          ]
        },
        "fpad": {
          "description": "Padding character at the file level",
          "type": "string",
          "maxLength": 16
        },
        "frecfm": {
          "description": "Record format of the receiver file Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "F",
            "V",
            "U",
            " "
          ]
        },
        "fspace": {
          "description": "Size of the local file, in Kbytes",
          "type": "integer",
          "minimum": 0,
          "maximum": 9999999999,
          "default": 0
        },
        "ftype": {
          "description": "File type, which is platform dependent. Windows : \"BVTOXFJ\"  OS400   : \" DESZJ\" UNIX    : \" BVTOXJ\" TANDEM  : \" BVTOXJEN\" z/OS    : \" ABMST_1J\"  Case insensitive.",
          "default": "",
          "type": "string",
          "enum": [
            "B",
            "V",
            "T",
            "O",
            "X",
            "F",
            "J",
            " ",
            "A",
            "M",
            "S",
            "_",
            "1"
          ]
        },
        "groupid": {
          "description": "Information completing the USERID of the CFTSEND command The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        },
        "ida": {
          "description": "Local transfer identifier assigned by the user or user application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 64
        },
        "nblksize": {
          "description": "File block size in protocol terms",
          "type": "integer",
          "minimum": 0,
          "maximum": 65535,
          "default": 0
        },
        "ncharset": {
          "description": "Destination file encoding",
          "type": "string",
          "maxLength": 32
        },
        "ncode": {
          "description": "Network file data code Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "ASCII",
            "EBCDIC",
            "BINARY",
            " "
          ]
        },
        "ncomp": {
          "description": "Transmission compression level",
          "type": "integer",
          "minimum": 0,
          "maximum": 31,
          "default": 15
        },
        "netband": {
          "description": "Outgoing port range",
          "type": "integer",
          "minimum": 1,
          "maximum": 16,
          "default": 1
        },
        "nfname": {
          "description": "Name of the physical file at the receiver partner site",
          "type": "string",
          "maxLength": 512
        },
        "nkeylen": {
          "description": "Length, in bytes, of the indexed file's key",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "nkeypos": {
          "description": "Location, in bytes, of the key in the records of an indexed file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "nlrecl": {
          "description": "Length of the record of the receiver file",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 0
        },
        "notify": {
          "description": "Defines the destination of the messages associated with the send transfer selected from the log file messages, by the value of the OPERMSG parameter The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 8
        },
        "npad": {
          "description": "Padding character at the network level",
          "type": "string",
          "maxLength": 16
        },
        "nrecfm": {
          "description": "File record format defined in protocol terms Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "F",
            "V",
            "U",
            " "
          ]
        },
        "nspace": {
          "description": "File size, in protocol terms, expressed as a number of blocks of 1 K bytes",
          "type": "integer",
          "minimum": 0,
          "maximum": 9999999999,
          "default": 0
        },
        "ntype": {
          "description": "File type, in protocol terms Case Insensitive",
          "type": "string",
          "maxLength": 0
        },
        "opermsg": {
          "description": "Categories of transfer information messages intended for the operator, with all the messages also being written in the log file",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 0
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "parm": {
          "description": "User parameter sent to the receiver",
          "type": "string",
          "maxLength": 512
        },
        "poststate": {
          "description": "The transfer phase step as it enters the Y phase Case Insensitive",
          "default": "DISP",
          "type": "string",
          "enum": [
            "DISP"
          ]
        },
        "posttimeout": {
          "description": "Timeout before changing the phase step to K if no END is received during post-processing",
          "type": "integer",
          "minimum": 0,
          "maximum": 3600,
          "default": 0
        },
        "pri": {
          "description": "Priority of scheduled transfers",
          "type": "integer",
          "minimum": 0,
          "maximum": 255,
          "default": 128
        },
        "rappl": {
          "description": "Identifier of the file receiver application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 48
        },
        "rpasswd": {
          "description": "Password for the user who is receiving the file",
          "type": "string",
          "maxLength": 32
        },
        "ruser": {
          "description": "Identifier for the user who is receiving the file Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "sappl": {
          "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 48
        },
        "selfname": {
          "description": "Name of a file that contains a list of files selected for sending Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "sigfname": {
          "description": "Name of the signature file Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "serial": {
          "description": "Parameter to enable file transfer serialization in flow definitions Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "Y",
            "X",
            " "
          ]
        },
        "sourceappl": {
          "description": "Identifier of the file sender application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "spart": {
          "description": "Network designation by which the local Transfer CFT identifies itself to its partner Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "spasswd": {
          "description": "Password for the user who is sending the file",
          "type": "string",
          "maxLength": 32
        },
        "state": {
          "description": "Transfer request state Case Insensitive",
          "default": "DISP",
          "type": "string",
          "enum": [
            "DISP",
            "HOLD",
            "KEEP"
          ]
        },
        "storageaccount": {
          "description": "Storage account Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "suser": {
          "description": "Identifier for the user who is sending the file Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "targetappl": {
          "description": "Identifier of the local file receiver application Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 100
        },
        "tcycle": {
          "description": "Transfer cycle period unit Case Insensitive",
          "default": "DAY",
          "type": "string",
          "enum": [
            "MIN",
            "DAY",
            "MONTH"
          ]
        },
        "trk": {
          "description": "Details provided to Sentinel about transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "userid": {
          "description": "Identifier of the transfer owner The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 32
        },
        "wfname": {
          "description": "Name of the temporary file used to send a group of files selected in line with the generic name specified in FNAME Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "workingdir": {
          "description": "Working directory Case Insensitive",
          "type": "string",
          "maxLength": 512
        },
        "xlate": {
          "description": "Identifier of the CFTXLATE object defining the translation table used for the transfers Case Insensitive",
          "type": "string",
          "maxLength": 32
        }
      }
    },
    "CftObjectsCfttcpList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCfttcpGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp"
        },
        "data": [
          {
            "type": "cfttcp",
            "id": 1,
            "attributes": {
              "cnxin": 2,
              "cnxout": 2,
              "comment": "Default destination for Paris office",
              "host": "paris.office",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/1"
            }
          },
          {
            "type": "cfttcp",
            "id": 62,
            "attributes": {
              "cnxin": 2,
              "cnxout": 2,
              "comment": "Alternate route for the Paris office",
              "host": "paris.alter.office",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/62"
            }
          }
        ]
      }
    },
    "CftObjectsCfttcpGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCfttcpGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/PARIS/tcp/1"
        },
        "data": {
          "type": "cfttcp",
          "id": 1,
          "attributes": {
            "cnxin": 2,
            "cnxout": 2,
            "comment": "Default destination for the Paris office",
            "host": "paris.office",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCfttcpGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cfttcp"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCfttcpAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCfttcpAttributes": {
      "type": "object",
      "required": [
        "host"
      ],
      "properties": {
        "cnxin": {
          "description": "Maximum number of sessions for input connections. The maximum value is 990 for z/OS platform and 1000 for other platforms.",
          "type": "integer",
          "minimum": 0,
          "default": 2
        },
        "cnxinout": {
          "description": "Maximum number of communication sessions. The maximum value is 990 for z/OS platform and 1000 for other platforms.",
          "type": "integer",
          "minimum": 0,
          "default": 2
        },
        "cnxout": {
          "description": "Maximum number of sessions for output connections",
          "type": "integer",
          "minimum": 0,
          "maximum": 1000,
          "default": 2
        },
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "imaxtime": {
          "description": "Last time for accepting incoming calls",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 23595999
        },
        "imintime": {
          "description": "Initial time for accepting incoming calls",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "omaxtime": {
          "description": "Last time for giving outgoing calls",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 23595999
        },
        "omintime": {
          "description": "Initial time for giving outgoing calls",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "retrym": {
          "description": "Maximum number of retry",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 12
        },
        "retryn": {
          "description": "Maximum number of retry by period",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 4
        },
        "retryw": {
          "description": "Time between two retries",
          "type": "integer",
          "minimum": 0,
          "maximum": 32767,
          "default": 1
        },
        "host": {
          "description": "Host name The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "maxLength": 512
          }
        },
        "verify": {
          "description": "Verifies the IP address (HOST) of an incoming connection request (checks the first 'n' digits of the caller number)",
          "type": "integer",
          "minimum": 0,
          "maximum": 64,
          "default": 0
        }
      }
    },
    "CftObjectsCftpartList": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CftObjectsCftpartGetInfo"
          }
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart"
        },
        "data": [
          {
            "type": "cftpart",
            "id": "paris",
            "attributes": {
              "prot": "pesit",
              "comment": "definition sample",
              "idf": "txt",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/paris"
            }
          },
          {
            "type": "cftpart",
            "id": "newyork",
            "attributes": {
              "prot": "pesit",
              "comment": "definition sample",
              "idf": "txt",
              "origin": "DESIGNER"
            },
            "links": {
              "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/newyork"
            }
          }
        ]
      }
    },
    "CftObjectsCftpartGet": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        },
        "data": {
          "$ref": "#/definitions/CftObjectsCftpartGetInfo"
        }
      },
      "example": {
        "links": {
          "self": "https://<hostname>:<restapi_port>/cft/api/v1/objects/cftpart/paris"
        },
        "data": {
          "type": "cftpart",
          "id": "paris",
          "attributes": {
            "prot": "pesit",
            "comment": "Definition sample",
            "idf": "txt",
            "origin": "DESIGNER"
          }
        }
      }
    },
    "CftObjectsCftpartGetInfo": {
      "type": "object",
      "required": [
        "type",
        "id",
        "attributes"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cftpart"
          ]
        },
        "id": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/CftObjectsCftpartAttributes"
        },
        "links": {
          "$ref": "#/definitions/ObjectSelfLinks"
        }
      }
    },
    "CftObjectsCftpartAttributes": {
      "type": "object",
      "required": [
        "prot"
      ],
      "properties": {
        "comment": {
          "description": "Free comment Case Insensitive",
          "type": "string",
          "maxLength": 80
        },
        "commut": {
          "description": "Type of switching supported for this partner Case Insensitive",
          "default": "YES",
          "type": "string",
          "enum": [
            "YES",
            "NO",
            "SERVER",
            "PART"
          ]
        },
        "cos": {
          "description": "Class Of Service for bandwidth control",
          "type": "string",
          "maxLength": 32
        },
        "ctrlpart": {
          "description": "Relevant only in server mode Case Insensitive",
          "default": "IGNORE",
          "type": "string",
          "enum": [
            "IGNORE",
            "ALL",
            "SPART",
            "RPART"
          ]
        },
        "fcharset": {
          "description": "Local file encoding",
          "type": "string",
          "maxLength": 32
        },
        "fprefix": {
          "description": "File name prefix The z/OS, IBM i, and OpenVMS platforms are case insensitive; place the value between double quotes to ensure case sensitivity.",
          "type": "string",
          "maxLength": 512
        },
        "group": {
          "description": "Group the partner belongs to Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "idf": {
          "description": "Default identifier of the file for the partner Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "imaxtime": {
          "description": "Maximum time after which the partner cannot call",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 23595999
        },
        "imintime": {
          "description": "Minimum time before which the partner cannot call",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "ipart": {
          "description": "Local identifier of an intermediate partner Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "nack": {
          "description": "Enables the negative acknowledgment feature Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            " ",
            "YES",
            "NO"
          ]
        },
        "ncharset": {
          "description": "Destination file encoding",
          "type": "string",
          "maxLength": 32
        },
        "nrpart": {
          "description": "Partner network identifier identifying the partner for incoming calls Case Insensitive, except if for a SFTP parameter the value is delimited by double quotes",
          "type": "string",
          "maxLength": 64
        },
        "nrpassw": {
          "description": "Partner sign-on password, authorizing a local site access right check Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "nspart": {
          "description": "Network identifier used by the local Transfer CFT to identify itself to its partner Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 64
        },
        "nspassw": {
          "description": "Partner sign-on password, authorizing a local site access right check Case Insensitive, except if value in delimited by double quotes",
          "type": "string",
          "maxLength": 32
        },
        "omaxtime": {
          "description": "Maximum time after which the partner can no longer be called",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 23595999
        },
        "omintime": {
          "description": "Minimum time before which the partner may not be called",
          "type": "integer",
          "minimum": 0,
          "maximum": 23595999,
          "default": 0
        },
        "origin": {
          "$ref": "#/definitions/CftEnumORIGIN"
        },
        "prot": {
          "description": "List of communication protocols (CFTPROT identifiers) authorized to communicate with this partner Case Insensitive",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "rauth": {
          "description": "CFTAUTH command ID (identifier) designating a list of IDFs authorized for the receive transfers with this partner Case Insensitive",
          "default": "*",
          "type": "string",
          "maxLength": 32
        },
        "sap": {
          "description": "Values of the remote SAPs, service access points, associated with each of the protocols defined by the PROT parameter Case Insensitive",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "maxLength": 32
          }
        },
        "sauth": {
          "description": "CFTAUTH command ID (identifier)designating a list of IDFs authorized for send transfers to this partner Case Insensitive",
          "default": "*",
          "type": "string",
          "maxLength": 32
        },
        "srdmz": {
          "description": "Secure relay multi RA support Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "ssl": {
          "description": "SSL command identifier used for security profiles Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "ssh": {
          "description": "SSH command Identifier used for security profiles Case Insensitive Valid only on platform supporting SFTP protocol (Unix, Windows)",
          "type": "string",
          "maxLength": 32
        },
        "state": {
          "description": "Partner state Case Insensitive",
          "default": "ACTIVEBOTH",
          "type": "string",
          "enum": [
            "ACTIVEBOTH",
            "ACTIVEREQ",
            "ACTIVESERV",
            "NOACTIVE"
          ]
        },
        "trk": {
          "description": "Detail provided to Sentinel about transfers Case Insensitive",
          "default": "UNDEFINED",
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL",
            "SUMMARY",
            "NO",
            "ERROR"
          ]
        },
        "xlate": {
          "description": "Translation table identifier used for transfers with this partner Case Insensitive",
          "type": "string",
          "maxLength": 32
        },
        "syst": {
          "description": "Type of operating system supported by the partner Case Insensitive",
          "default": " ",
          "type": "string",
          "enum": [
            "MSDOS",
            "OS2",
            "OS400",
            "GCOS7",
            "GCOS8",
            "CTOS",
            "VSE",
            "VM",
            "MVS",
            "UNIX",
            "VMS",
            "GUARD",
            "BS2000",
            "WINNT",
            "WIN3X",
            "NETW",
            "WIN95",
            "OS2200",
            " "
          ]
        },
        "tcp": {
          "description": "List of TCP definitions associated with the partner.",
          "readOnly": true,
          "type": "array",
          "maxItems": 64,
          "items": {
            "$ref": "#/definitions/CftObjectsCfttcpGet"
          }
        }
      }
    }
  },
  "responses": {
    "ObjectCreated": {
      "description": "Object created successfully.",
      "schema": {
        "$ref": "#/definitions/RespObjectLinks"
      }
    },
    "ObjectDeleted": {
      "description": "Successfully deleted the object."
    },
    "ObjectUpdated": {
      "description": "Object Successfully modified.",
      "schema": {
        "$ref": "#/definitions/RespObjectLinks"
      }
    },
    "ObjectNotFound": {
      "description": "Object not found.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "BadRequest": {
      "description": "Bad request.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized - Incorrect credentials.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Forbidden": {
      "description": "Forbidden - The requester does not have sufficient rights.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "TransferNotFound": {
      "description": "Transfer not found.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ServerError": {
      "description": "Internal Server Error.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "OtherError": {
      "description": "Unexpected error.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "CftCmdStateDetails": {
      "description": "Cft Status.",
      "schema": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/definitions/ObjectSelfLinks"
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CftCmdHostDetails"
            }
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CftCmdNodeDetails"
            }
          }
        }
      }
    },
    "CftCmdNodesList": {
      "description": "Cft Nodes List.",
      "schema": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/definitions/ObjectSelfLinks"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CftCmdNodeDetails"
            }
          }
        }
      }
    },
    "CftCmdHostsList": {
      "description": "Cft Hostname list.",
      "schema": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/definitions/ObjectSelfLinks"
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CftCmdHostDetails"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "idtu": {
      "name": "idtu",
      "in": "path",
      "description": "Unique transfer identifier.",
      "type": "string",
      "pattern": "[A-Z][0-9]{7}",
      "minLength": 8,
      "maxLength": 8,
      "required": true
    },
    "objectid": {
      "name": "id",
      "in": "path",
      "description": "object id",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    },
    "partnerid": {
      "name": "partnerid",
      "in": "path",
      "description": "id of a cftpart object",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    },
    "classid": {
      "name": "id",
      "in": "path",
      "description": "Class of the TCP local resource(s) used to establish the connection with the partner.",
      "type": "integer",
      "minimum": 0,
      "maximum": 64,
      "required": true
    },
    "idfsendid": {
      "name": "idfsendid",
      "in": "path",
      "description": "id of a cftsend object",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    },
    "idfrecvid": {
      "name": "idfrecvid",
      "in": "path",
      "description": "id of a cftrecv object",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    },
    "idfpartid": {
      "name": "id",
      "in": "path",
      "description": "id of a cftpart definition for which the alias is created",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    },
    "offsetParam": {
      "name": "offset",
      "in": "query",
      "description": "Number of objects to skip.",
      "required": false,
      "type": "integer",
      "default": 0
    },
    "limitParam": {
      "name": "limit",
      "in": "query",
      "description": "Maximum number of objects to return.",
      "required": false,
      "type": "integer",
      "default": 100
    },
    "selectid": {
      "name": "id",
      "in": "query",
      "description": "Object ID.",
      "required": false,
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    },
    "selectclass": {
      "name": "id",
      "in": "query",
      "description": "Class of the TCP local resource(s) used to establish the connection with the partner",
      "required": false,
      "type": "integer",
      "minimum": 0,
      "maximum": 64
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "List of fields to return.",
      "required": false,
      "type": "array",
      "maxItems": 1,
      "minItems": 15,
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "SelectTypeXlate": {
      "name": "type",
      "in": "query",
      "type": "string",
      "enum": [
        "cftxlatesendasciiascii",
        "cftxlatesendasciiebcdic",
        "cftxlatesendebcdicebcdic",
        "cftxlatesendebcdicascii",
        "cftxlaterecvasciiascii",
        "cftxlaterecvasciiebcdic",
        "cftxlaterecvebcdicebcdic",
        "cftxlaterecvebcdicascii"
      ]
    },
    "nodeid": {
      "name": "id",
      "in": "path",
      "description": "Node Id.",
      "type": "integer",
      "minimum": 0,
      "maximum": 8,
      "required": true
    },
    "hostid": {
      "name": "id",
      "in": "path",
      "description": "Alias for Hostname.",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "required": true
    }
  }
}